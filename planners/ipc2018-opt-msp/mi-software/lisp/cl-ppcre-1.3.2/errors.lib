#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "CL-PPCRE"))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CL-PPCRE|::|*SYNTAX-ERROR-STRING*|))
(|COMMON-LISP|::|LET*| ((#1=#:|G23593| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|CL-PPCRE|::|PPCRE-ERROR|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|SIMPLE-ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"All errors signaled by CL-PPCRE are of\n
this type."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23597| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|CL-PPCRE|::|PPCRE-SYNTAX-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|CL-PPCRE|::|PPCRE-ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|STRING| :|READERS|
    '(|CL-PPCRE|::|PPCRE-SYNTAX-ERROR-STRING|) :|INITARGS| '(:|STRING|))
   (|COMMON-LISP|::|LIST| :|NAME| '|CL-PPCRE|::|POS| :|READERS|
    '(|CL-PPCRE|::|PPCRE-SYNTAX-ERROR-POS|) :|INITARGS| '(:|POS|)))
  :|METACLASS| #1# :|DIRECT-DEFAULT-INITARGS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| ':|POS| '|COMMON-LISP|::|NIL|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| ':|STRING| '|CL-PPCRE|::|*SYNTAX-ERROR-STRING*|
    (|COMMON-LISP|::|FUNCTION| |CL-PPCRE|::|DEFAULT-STRING|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
      |CL-PPCRE|::|*SYNTAX-ERROR-STRING*|))))
  :|DOCUMENTATION|
  '"Signaled if CL-PPCRE's parser encounters an error\n
when trying to parse a regex string or to convert a parse tree into\n
its internal representation."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CL-PPCRE|::|PPCRE-SYNTAX-ERROR-STRING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CL-PPCRE|::|PPCRE-SYNTAX-ERROR-POS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G23678| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|CL-PPCRE|::|PPCRE-INVOCATION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|CL-PPCRE|::|PPCRE-ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Signaled when CL-PPCRE functions are\n
invoked with wrong arguments."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR*|)
(|SYSTEM|::|%PUTD| '|CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-PPCRE|::|POS|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-PPCRE|::|FORMAT-CONTROL| (|COMMON-LISP|::|CADDR| . #1#))
       (|CL-PPCRE|::|FORMAT-ARGUMENTS| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR*|
       `(|COMMON-LISP|::|ERROR| '|CL-PPCRE|::|PPCRE-SYNTAX-ERROR| :|POS|
         ,|CL-PPCRE|::|POS| :|FORMAT-CONTROL| ,|CL-PPCRE|::|FORMAT-CONTROL|
         :|FORMAT-ARGUMENTS|
         (|COMMON-LISP|::|LIST| ,@|CL-PPCRE|::|FORMAT-ARGUMENTS|)))))))
  '(|CL-PPCRE|::|POS| |CL-PPCRE|::|FORMAT-CONTROL| |COMMON-LISP|::|&REST|
    |CL-PPCRE|::|FORMAT-ARGUMENTS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-PPCRE|::|FORMAT-CONTROL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-PPCRE|::|FORMAT-ARGUMENTS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR|
       `(|CL-PPCRE|::|SIGNAL-PPCRE-SYNTAX-ERROR*| |COMMON-LISP|::|NIL|
         ,|CL-PPCRE|::|FORMAT-CONTROL| ,@|CL-PPCRE|::|FORMAT-ARGUMENTS|))))))
  '(|CL-PPCRE|::|FORMAT-CONTROL| |COMMON-LISP|::|&REST|
    |CL-PPCRE|::|FORMAT-ARGUMENTS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|CL-PPCRE|::|SIGNAL-PPCRE-INVOCATION-ERROR|)
(|SYSTEM|::|%PUTD| '|CL-PPCRE|::|SIGNAL-PPCRE-INVOCATION-ERROR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CL-PPCRE|::|SIGNAL-PPCRE-INVOCATION-ERROR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CL-PPCRE|::|FORMAT-CONTROL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CL-PPCRE|::|FORMAT-ARGUMENTS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CL-PPCRE|::|SIGNAL-PPCRE-INVOCATION-ERROR|
       `(|COMMON-LISP|::|ERROR| '|CL-PPCRE|::|PPCRE-INVOCATION-ERROR|
         :|FORMAT-CONTROL| ,|CL-PPCRE|::|FORMAT-CONTROL| :|FORMAT-ARGUMENTS|
         (|COMMON-LISP|::|LIST| ,@|CL-PPCRE|::|FORMAT-ARGUMENTS|)))))))
  '(|CL-PPCRE|::|FORMAT-CONTROL| |COMMON-LISP|::|&REST|
    |CL-PPCRE|::|FORMAT-ARGUMENTS|)))
