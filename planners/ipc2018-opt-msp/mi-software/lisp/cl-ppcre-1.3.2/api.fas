(|SYSTEM|::|VERSION| '(20080430.))
#0Y_ #0Y |CHARSET|::|UTF-8|
#Y(#:|1 32 (IN-PACKAGE #:CL-PPCRE)-1|
   #17Y(00 00 00 00 00 00 00 00 20 01 DA 31 F6 0F 01 19 01)
   ("CL-PPCRE" |COMMON-LISP|::|*PACKAGE*|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|34 45 (DEFGENERIC CREATE-SCANNER (REGEX &KEY CASE-INSENSITIVE-MODE ...) ...)-2|
   #120Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DA
         6F 04 2D 03 05 6B 06 99 07 DA E2 AF E3 E4 E5 E6 E7 E8 E9 01 03 BA 6F
         10 1B 24 AF 38 01 80 A9 03 14 AD 31 B8 16 02 1B 14 94 00 94 00 9E 5C
         5C 78 76 00 7B 02 A1 21 63 9D FC FB 16 02 83 00 AC 8D 9F 66 16 01 9E
         16 01 F8 EB 6B 12 ED BC EE DA 6E 03 15 F0 63 6E 03 17 F2 63 7B 06 33
         02 23 9B 0B 02)
   (|CL-PPCRE|::|CREATE-SCANNER| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1| |CLOS|::|DEFGENERIC| |SYSTEM|::|FBOUND-STRING|
    |SYSTEM|::|CHECK-REDEFINITION| |CLOS|::|<STANDARD-GENERIC-FUNCTION>|
    |CLOS|::|ENSURE-GENERIC-FUNCTION| :|GENERIC-FUNCTION-CLASS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|REGEX| |COMMON-LISP|::|&KEY|
     |CL-PPCRE|::|CASE-INSENSITIVE-MODE| |CL-PPCRE|::|MULTI-LINE-MODE|
     |CL-PPCRE|::|SINGLE-LINE-MODE| |CL-PPCRE|::|EXTENDED-MODE|
     |CL-PPCRE|::|DESTRUCTIVE|)
    :|ARGUMENT-PRECEDENCE-ORDER| (|CL-PPCRE|::|REGEX|) :|DOCUMENTATION|
    "Accepts a regular expression - either as a\n
parse-tree or as a string - and returns a scan closure which will scan\n
strings for this regular expression and a list mapping registers to\n
their names (NIL stands for unnamed ones). The \"mode\" keyboard\n
arguments are equivalent to the imsx modifiers in Perl. If DESTRUCTIVE\n
is not NIL the function is allowed to destructively modify its first\n
argument (but only if it's a parse tree)."
    |CLOS|::|METHODS| |CLOS|::|CLASS-DEFAULT-INITARGS| :|METHOD-CLASS|
    |CLOS|::|<STANDARD-METHOD>| :|METHOD-COMBINATION| :|NAME|
    |CLOS|::|MAKE-GENERIC-FUNCTION-PROTOTYPE| |CLOS|::|STANDARD|
    |CLOS|::|FIND-METHOD-COMBINATION| :|DECLARATIONS|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|47 68 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-3|
   #43Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 7B 01 7B 08 2D 03 0B 19 01)
   (|CL-PPCRE|::|CREATE-SCANNER| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1|
    #Y(#:|47 68 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-3-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|47 68 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-3-1-1|
           #16Y(00 00 00 00 01 00 00 00 21 17 DA AF A0 9B 01 03)
           (#Y(#:|47 68 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-3-1-1-1|
               #68Y(00 00 00 00 01 00 00 00 E0 1C 05 00 00 00 3D 05 3D 04 3D 03
                    3D 02 9F 10 05 0E 06 1C 1F A6 14 AC 32 61 10 09 E4 B0 6F 0B
                    61 01 7A DA BA DB BB DC BC DE 64 2D 09 0C 11 16 01 11 19 07
                    B5 B2 70 07 2F 08 1B 5A)
               (:|CASE-INSENSITIVE-MODE| :|MULTI-LINE-MODE| :|SINGLE-LINE-MODE|
                :|EXTENDED-MODE| :|DESTRUCTIVE| |CL-PPCRE|::|*EXTENDED-MODE-P*|
                |CL-PPCRE|::|*ALLOW-QUOTING*| |CL-PPCRE|::|CLEAN-COMMENTS|
                |CL-PPCRE|::|QUOTE-SECTIONS|
                |CL-PPCRE|::|*SYNTAX-ERROR-STRING*| :|GROUP|
                |CL-PPCRE|::|PARSE-STRING| |CL-PPCRE|::|CREATE-SCANNER|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|REGEX-STRING| |COMMON-LISP|::|&KEY|
     |CL-PPCRE|::|CASE-INSENSITIVE-MODE| |CL-PPCRE|::|MULTI-LINE-MODE|
     |CL-PPCRE|::|SINGLE-LINE-MODE| |CL-PPCRE|::|EXTENDED-MODE|
     |CL-PPCRE|::|DESTRUCTIVE|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
      (:|CASE-INSENSITIVE-MODE| :|MULTI-LINE-MODE| :|SINGLE-LINE-MODE|
       :|EXTENDED-MODE| :|DESTRUCTIVE|)
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|STRING| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|70 81 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-4|
   #43Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 7B 01 7B 08 2D 03 0B 19 01)
   (|CL-PPCRE|::|CREATE-SCANNER| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1|
    #Y(#:|70 81 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-4-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|70 81 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-4-1-1|
           #16Y(00 00 00 00 01 00 00 00 21 17 DA AF A0 9B 01 03)
           (#Y(#:|70 81 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-4-1-1-1|
               #51Y(00 00 00 00 01 00 00 00 E0 1C 05 00 00 00 3D 05 3D 04 3D 03
                    3B 02 0D 7D 02 93 05 0B DF E0 E1 E2 63 33 04 1E 92 05 75 92
                    04 72 92 03 6F 92 02 6C A3 19 07)
               (:|CASE-INSENSITIVE-MODE| :|MULTI-LINE-MODE| :|SINGLE-LINE-MODE|
                :|EXTENDED-MODE| :|DESTRUCTIVE|
                |CL-PPCRE|::|PPCRE-INVOCATION-ERROR| :|FORMAT-CONTROL|
                "You can't use the keyword arguments to modify an existing scanner."
                :|FORMAT-ARGUMENTS|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|SCANNER| |COMMON-LISP|::|&KEY|
     |CL-PPCRE|::|CASE-INSENSITIVE-MODE| |CL-PPCRE|::|MULTI-LINE-MODE|
     |CL-PPCRE|::|SINGLE-LINE-MODE| |CL-PPCRE|::|EXTENDED-MODE|
     |CL-PPCRE|::|DESTRUCTIVE|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
      (:|CASE-INSENSITIVE-MODE| :|MULTI-LINE-MODE| :|SINGLE-LINE-MODE|
       :|EXTENDED-MODE| :|DESTRUCTIVE|)
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|FUNCTION| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|83 179 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-5|
   #43Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 64 38 02 72 3A 7B 01 7B 08 2D 03 0A 19 01)
   (|CL-PPCRE|::|CREATE-SCANNER| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1|
    #Y(#:|83 179 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-5-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|83 179 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-5-1-1|
           #16Y(00 00 00 00 01 00 00 00 21 17 DA AF A0 9B 01 03)
           (#Y(#:|83 179 (DEFMETHOD CREATE-SCANNER (# &KEY CASE-INSENSITIVE-MODE ...) ...)-5-1-1-1|
               #287Y(00 00 00 00 01 00 00 00 E0 1C 05 00 00 00 3D 05 3D 04 3D
                     03 3D 02 3B 01 3F 7D 01 93 02 3D DF E0 E1 E2 63 33 04 1E
                     E3 84 00 93 05 3D E4 84 00 93 06 3A E5 84 00 93 00 3F 1B
                     35 6B 17 6F 1A EC 71 32 6B 17 6F 1B 30 1C 1B 80 6D BF 6F
                     1A EC 71 32 C0 6F 1B 30 1C 1B 80 88 92 02 43 92 01 04 B2
                     80 AE 06 63 92 04 40 92 05 43 92 06 46 93 00 08 E6 E7 9F
                     7A B5 61 03 FF 16 01 00 10 0E B5 2F 0F 42 04 AF 6F 10 6F
                     11 AC EC 30 13 AC EC 30 14 00 10 15 00 10 16 B2 2F 17 10
                     17 0E 17 1D 1A 14 6F 18 8F AD 14 F3 6B 17 6F 18 90 01 2F
                     FF 8D 6B 17 6F 1A 6B 17 6F 1B 30 1D 14 D7 10 1E D7 10 1F
                     BC 65 20 70 21 BF 65 22 8F 3C 17 BF 6F 18 8F AD 11 F3 C0
                     6F 18 90 01 2F FF 72 BF 6F 1A C0 6F 1B 30 1D 14 AD BF 6F
                     23 C0 88 24 09 C2 65 25 8F 3C 03 C2 2F 26 14 C3 B0 93 0D
                     02 0E 16 14 BA 93 0F 04 6B 17 2F 18 14 6B 15 6B 1E 6B 1F
                     66 20 6E 0C 27 C0 40 02 16 02 12 02 16 01 12 03 16 05 11
                     19 07)
               (:|CASE-INSENSITIVE-MODE| :|MULTI-LINE-MODE| :|SINGLE-LINE-MODE|
                :|EXTENDED-MODE| :|DESTRUCTIVE|
                |CL-PPCRE|::|PPCRE-INVOCATION-ERROR| :|FORMAT-CONTROL|
                "Extended mode doesn't make sense in parse trees."
                :|FORMAT-ARGUMENTS| :|SINGLE-LINE-MODE-P| :|MULTI-LINE-MODE-P|
                :|CASE-INSENSITIVE-P| :|GROUP| :|FLAGS|
                |CL-PPCRE|::|*SYNTAX-ERROR-STRING*| |CL-PPCRE|::|CONVERT|
                |CL-PPCRE|::|FLATTEN| |CL-PPCRE|::|GATHER-STRINGS| 0.
                |CL-PPCRE|::|COMPUTE-MIN-REST| |CL-PPCRE|::|COMPUTE-OFFSETS|
                |CL-PPCRE|::|END-STRING-OFFSET| |CL-PPCRE|::|END-ANCHORED-P|
                |CL-PPCRE|::|END-STRING| |CL-PPCRE|::|LEN| 1. |CL-PPCRE|::|STR|
                |CL-PPCRE|::|CASE-INSENSITIVE-P|
                |CL-PPCRE|::|CREATE-CHAR-SEARCHER|
                |CL-PPCRE|::|CREATE-BMH-MATCHER| |CL-PPCRE|::|*REP-NUM*|
                |CL-PPCRE|::|*ZERO-LENGTH-NUM*| #.#'|COMMON-LISP|::|IDENTITY|
                |CL-PPCRE|::|CREATE-MATCHER-AUX|
                #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|STR|)
                |CL-PPCRE|::|REGEX-MIN-LENGTH| |CL-PPCRE|::|START-ANCHORED-P|
                #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|EVERYTHING|)
                |CL-PPCRE|::|SINGLE-LINE-P| |CL-PPCRE|::|CREATE-SCANNER-AUX|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|PARSE-TREE| |COMMON-LISP|::|&KEY|
     |CL-PPCRE|::|CASE-INSENSITIVE-MODE| |CL-PPCRE|::|MULTI-LINE-MODE|
     |CL-PPCRE|::|SINGLE-LINE-MODE| |CL-PPCRE|::|EXTENDED-MODE|
     |CL-PPCRE|::|DESTRUCTIVE|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
      (:|CASE-INSENSITIVE-MODE| :|MULTI-LINE-MODE| :|SINGLE-LINE-MODE|
       :|EXTENDED-MODE| :|DESTRUCTIVE|)
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|181 221 (DEFGENERIC SCAN (REGEX TARGET-STRING &KEY ...) ...)-6|
   #120Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DA
         6F 04 2D 03 05 6B 06 99 07 DA E2 AF E3 E4 E5 E6 E7 E8 E9 01 03 BA 6F
         10 1B 24 AF 38 01 80 A9 03 14 AD 31 B8 16 02 1B 14 94 00 94 00 9E 5C
         5C 78 76 00 7B 02 A1 21 63 9D FC FB 16 02 83 00 AC 8D 9F 66 16 01 9E
         16 01 F8 EB 6B 12 ED BC EE DA 6E 03 15 F0 63 6E 03 17 F2 63 7B 06 33
         02 23 9B 0B 02)
   (|CL-PPCRE|::|SCAN| |SYSTEM|::|TRACED-DEFINITION| |SYSTEM|::|UNTRACE1|
    |CLOS|::|DEFGENERIC| |SYSTEM|::|FBOUND-STRING|
    |SYSTEM|::|CHECK-REDEFINITION| |CLOS|::|<STANDARD-GENERIC-FUNCTION>|
    |CLOS|::|ENSURE-GENERIC-FUNCTION| :|GENERIC-FUNCTION-CLASS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
     |CL-PPCRE|::|START| |CL-PPCRE|::|END| |CL-PPCRE|::|REAL-START-POS|)
    :|ARGUMENT-PRECEDENCE-ORDER|
    (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING|) :|DOCUMENTATION|
    "Searches TARGET-STRING from START to END and tries\n
to match REGEX.  On success returns four values - the start of the\n
match, the end of the match, and two arrays denoting the beginnings\n
and ends of register matches.  On failure returns NIL.  REGEX can be a\n
string which will be parsed according to Perl syntax, a parse tree, or\n
a pre-compiled scanner created by CREATE-SCANNER.  TARGET-STRING will\n
be coerced to a simple string if it isn't one already.  The\n
REAL-START-POS parameter should be ignored - it exists only for\n
internal purposes."
    |CLOS|::|METHODS| |CLOS|::|CLASS-DEFAULT-INITARGS| :|METHOD-CLASS|
    |CLOS|::|<STANDARD-METHOD>| :|METHOD-COMBINATION| :|NAME|
    |CLOS|::|MAKE-GENERIC-FUNCTION-PROTOTYPE| |CLOS|::|STANDARD|
    |CLOS|::|FIND-METHOD-COMBINATION| :|DECLARATIONS|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|223 233 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-7|
   #48Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 64 38 02 72 3A 7B 02 7B 08 2D 03 0B 19
        01)
   (|CL-PPCRE|::|SCAN| |SYSTEM|::|TRACED-DEFINITION| |SYSTEM|::|UNTRACE1|
    #Y(#:|223 233 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-7-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|223 233 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-7-1-1|
           #17Y(00 00 00 00 02 00 00 00 21 18 DA B0 B0 A1 9B 02 04)
           (#Y(#:|223 233 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-7-1-1-1|
               #54Y(00 00 00 00 02 00 00 00 E0 1D 03 00 00 00 3B 03 02 C8 FB 3B
                    02 04 B0 81 62 02 3B 01 01 00 10 04 B4 6F 05 B4 8E 36 0C B4
                    E0 32 3B 14 B4 B4 36 03 11 19 06 A5 1B 75)
               (:|START| :|END| :|REAL-START-POS| 0.
                |CL-PPCRE|::|*REAL-START-POS*| |CL-PPCRE|::|CREATE-SCANNER|
                |COMMON-LISP|::|SIMPLE-STRING|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|REGEX-STRING| |CL-PPCRE|::|TARGET-STRING|
     |COMMON-LISP|::|&KEY| (|CL-PPCRE|::|START| 0.)
     (|CL-PPCRE|::|END| (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
     ((:|REAL-START-POS| |CL-PPCRE|::|*REAL-START-POS*|) |COMMON-LISP|::|NIL|))
    |CLOS|::|SIGNATURE|
    #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
      (:|START| :|END| :|REAL-START-POS|) |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|STRING| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|235 243 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-8|
   #48Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 64 38 02 72 3A 7B 02 7B 08 2D 03 0B 19
        01)
   (|CL-PPCRE|::|SCAN| |SYSTEM|::|TRACED-DEFINITION| |SYSTEM|::|UNTRACE1|
    #Y(#:|235 243 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-8-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|235 243 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-8-1-1|
           #17Y(00 00 00 00 02 00 00 00 21 18 DA B0 B0 A1 9B 02 04)
           (#Y(#:|235 243 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-8-1-1-1|
               #52Y(00 00 00 00 02 00 00 00 E0 1D 03 00 00 00 3B 03 02 C8 FB 3B
                    02 04 B0 81 62 02 3B 01 01 00 10 04 B4 B4 8E 36 0C B4 DF 32
                    3B 14 B4 B4 36 03 11 19 06 A5 1B 75)
               (:|START| :|END| :|REAL-START-POS| 0.
                |CL-PPCRE|::|*REAL-START-POS*| |COMMON-LISP|::|SIMPLE-STRING|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|SCANNER| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
     (|CL-PPCRE|::|START| 0.)
     (|CL-PPCRE|::|END| (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
     ((:|REAL-START-POS| |CL-PPCRE|::|*REAL-START-POS*|) |COMMON-LISP|::|NIL|))
    |CLOS|::|SIGNATURE|
    #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
      (:|START| :|END| :|REAL-START-POS|) |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|FUNCTION| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|245 253 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-9|
   #48Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 64 38 02 72 3A 64 38 02 72 3A 7B 02 7B 08 2D 03 0A 19
        01)
   (|CL-PPCRE|::|SCAN| |SYSTEM|::|TRACED-DEFINITION| |SYSTEM|::|UNTRACE1|
    #Y(#:|245 253 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-9-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|245 253 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-9-1-1|
           #17Y(00 00 00 00 02 00 00 00 21 18 DA B0 B0 A1 9B 02 04)
           (#Y(#:|245 253 (DEFMETHOD SCAN (# TARGET-STRING &KEY ...) ...)-9-1-1-1|
               #54Y(00 00 00 00 02 00 00 00 E0 1D 03 00 00 00 3B 03 02 C8 FB 3B
                    02 04 B0 81 62 02 3B 01 01 00 10 04 B4 6F 05 B4 8E 36 0C B4
                    E0 32 3B 14 B4 B4 36 03 11 19 06 A5 1B 75)
               (:|START| :|END| :|REAL-START-POS| 0.
                |CL-PPCRE|::|*REAL-START-POS*| |CL-PPCRE|::|CREATE-SCANNER|
                |COMMON-LISP|::|SIMPLE-STRING|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)))
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|PARSE-TREE| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
     (|CL-PPCRE|::|START| 0.)
     (|CL-PPCRE|::|END| (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
     ((:|REAL-START-POS| |CL-PPCRE|::|*REAL-START-POS*|) |COMMON-LISP|::|NIL|))
    |CLOS|::|SIGNATURE|
    #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
      (:|START| :|END| :|REAL-START-POS|) |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|255 290 (DEFINE-COMPILER-MACRO SCAN (&WHOLE FORM &ENVIRONMENT ...) ...)-10-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|SCAN| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|255 290 (DEFINE-COMPILER-MACRO SCAN (&WHOLE FORM &ENVIRONMENT ...) ...)-10-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|SCAN|
       #62Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            13 9F 5C 78 A0 5C 5C 78 A1 5C 5C 79 AE B1 8C 66 08 A2 19 06 AE 2F
            03 19 03 DE DF E0 B1 7B 02 7B 02 AF A0 5D 5D 5D 19 06)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 3. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|SCAN|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at compile time."
       1)
    |CL-PPCRE|::|SCAN|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|255 290 (DEFINE-COMPILER-MACRO SCAN (&WHOLE FORM &ENVIRONMENT ...) ...)-10-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01) (|CL-PPCRE|::|SCAN|)
   |COMMON-LISP|::|NIL|)
#Y(#:|292 315 (DEFUN SCAN-TO-STRINGS (REGEX TARGET-STRING &KEY ...) ...)-11|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|SCAN-TO-STRINGS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|SCAN-TO-STRINGS|
       #92Y(00 00 00 00 02 00 00 00 A6 1D 03 00 00 00 00 2B 01 7F 05 00 00 3B
            04 02 C8 FC 3B 03 06 68 00 00 81 62 03 3D 02 B2 68 01 00 DA B3 DB
            B4 2D 06 04 42 04 93 03 20 A1 2B 01 92 07 1D CB 0B 00 00 14 68 06
            00 B2 B2 76 03 E1 AE 6D 08 01 B1 B1 73 01 27 40 02 19 0C 00 19 0B
            98 05 1B 60)
       (:|START| :|END| :|SHAREDP| 0. |CL-PPCRE|::|SCAN| |CL-PPCRE|::|NSUBSEQ|
        #.#'|COMMON-LISP|::|SUBSEQ| |COMMON-LISP|::|VECTOR|
        #Y(|CL-PPCRE|::|SCAN-TO-STRINGS-1|
           #27Y(00 00 00 00 02 00 00 00 26 03 9F 1F 0C 69 00 01 69 01 01 B0 B0
                36 03 19 03 19 03)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|CL-PPCRE|::|REG-START| |CL-PPCRE|::|REG-END|) |COMMON-LISP|::|NIL|
           1))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END|
         (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
        |CL-PPCRE|::|SHAREDP|)
       "Like SCAN but returns substrings of TARGET-STRING instead of\n
positions, i.e. this function returns two values on success: the whole\n
match as a string plus an array of substrings (or NILs) corresponding\n
to the matched registers. If SHAREDP is true, the substrings may share\n
structure with TARGET-STRING."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|317 324 (DEFINE-COMPILER-MACRO SCAN-TO-STRINGS (&WHOLE FORM &ENVIRONMENT ...) ...)-12-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|SCAN-TO-STRINGS| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|317 324 (DEFINE-COMPILER-MACRO SCAN-TO-STRINGS (&WHOLE FORM &ENVIRONMENT ...) ...)-12-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|SCAN-TO-STRINGS|
       #62Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            13 9F 5C 78 A0 5C 5C 78 A1 5C 5C 79 AE B1 8C 66 08 A2 19 06 AE 2F
            03 19 03 DE DF E0 B1 7B 02 7B 02 AF A0 5D 5D 5D 19 06)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 3. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|SCAN-TO-STRINGS|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at compile time."
       1)
    |CL-PPCRE|::|SCAN-TO-STRINGS|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|317 324 (DEFINE-COMPILER-MACRO SCAN-TO-STRINGS (&WHOLE FORM &ENVIRONMENT ...) ...)-12-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01) (|CL-PPCRE|::|SCAN-TO-STRINGS|)
   |COMMON-LISP|::|NIL|)
#Y(#:|326 361 (DEFMACRO REGISTER-GROUPS-BIND (VAR-LIST # &BODY ...) ...)-13|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|REGISTER-GROUPS-BIND| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REGISTER-GROUPS-BIND|
       #268Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 80 8C 9F 5C
             78 A0 5C 5C 78 AC DD DD 64 2D 04 01 1D 80 80 AC 94 00 9E 5C 78 9F
             5C 79 AC E5 63 72 9F AD E6 63 72 9F AE E7 63 72 9F A8 5C 5C 79 B0
             E8 31 6A E9 72 AA EA AD B4 7B 02 7B 01 EB 72 AA EC 72 AA ED 72 AA
             EE 72 AA EF 72 AA F0 72 AA F1 B2 B2 B2 B2 7B 04 F2 BE B8 E5 F3 BF
             03 1A 5D 7A E6 F3 C0 F5 BF 7B 02 7B 03 7B 07 F6 F7 B5 7B 02 7B 02
             65 1E B6 65 1F B3 65 20 BF 03 21 5D 7A 7B 02 63 66 1B 6F 22 01 04
             03 23 F9 1B 80 52 AE 2F 02 19 03 DE DF B2 E0 B0 E1 6F 08 E3 B3 E4
             33 07 1F 87 04 05 5B FB A2 5C 5B FA 1D 30 14 EA BD 65 24 C1 B2 7B
             03 7B 02 7B 01 65 20 BF 65 25 B5 65 25 C2 66 1F 66 19 65 24 66 1C
             BA 7B 03 7B 05 7B 03 03 26 5D 5D 7A 7B 03 7B 02 84 00 83 04 85 01
             B0 8D 9F FF BC AC 31 B1 16 06 7A 04 11 5D 7A 7B 03 61 05 16 05 F8
             61 03 19 0E)
       (3. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR| 2.
        |EXT|::|SOURCE-PROGRAM-ERROR| :|FORM| :|DETAIL|
        "~S: ~S does not match lambda list element ~:S" |SYSTEM|::|TEXT|
        |CL-PPCRE|::|REGISTER-GROUPS-BIND|
        #1=(|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING|
            |COMMON-LISP|::|&KEY| |CL-PPCRE|::|START| |CL-PPCRE|::|END|
            |CL-PPCRE|::|SHAREDP|)
        :|START| :|END| :|SHAREDP| (:|SHAREDP| :|END| :|START|) "TARGET-STRING"
        |COMMON-LISP|::|LET| "MATCH-START" "MATCH-END" "REG-STARTS" "REG-ENDS"
        "START-INDEX" "SUBSTR-FN" |COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        |CL-PPCRE|::|SCAN| |COMMON-LISP|::|OR| (0.) |COMMON-LISP|::|LENGTH|
        |COMMON-LISP|::|DECLARE| |COMMON-LISP|::|IGNORE| |COMMON-LISP|::|WHEN|
        |COMMON-LISP|::|LET*| |COMMON-LISP|::|IF|
        (#'|CL-PPCRE|::|NSUBSEQ| #'|COMMON-LISP|::|SUBSEQ|)
        |CL-PPCRE|::|NORMALIZE-VAR-LIST| 0. |COMMON-LISP|::|AREF|
        |COMMON-LISP|::|FUNCALL| (|COMMON-LISP|::|NIL|))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Executes BODY with the variables in VAR-LIST bound to the\n
corresponding register groups after TARGET-STRING has been matched\n
against REGEX, i.e. each variable is either bound to a string or to\n
NIL. If there is no match, BODY is _not_ executed. For each element of\n
VAR-LIST which is NIL there's no binding to the corresponding register\n
group. The number of variables in VAR-LIST must not be greater than\n
the number of register groups. If SHAREDP is true, the substrings may\n
share structure with TARGET-STRING."
       1)
    (|CL-PPCRE|::|VAR-LIST| #1# |COMMON-LISP|::|&BODY| |CL-PPCRE|::|BODY|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|363 425 (DEFMACRO DO-SCANS (# &BODY BODY ...) ...)-14|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|DO-SCANS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|DO-SCANS|
       #340Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 81 24 9F 5C
             78 AC DD DE 64 2D 04 01 1D 81 1C AC 94 00 9E 5C 78 9F 5C 5C 78 A0
             5C 5C 5C 78 B0 71 A2 A2 5C 5C 5C 5C 5C 78 A3 5C 5C 5C 5C 5C 5C 78
             A4 5C 5C 5C 5C 5C 5C 79 AC E6 63 72 9F AD E7 63 72 9F AB 5C 79 AF
             E8 31 6A E9 72 AA EA AD B4 7B 02 7B 01 EB 72 AA EC 72 AA ED 72 AA
             EE 72 AA EF 72 AA F0 72 AA F1 63 F2 B4 F3 BC 03 1A 5D 7A 7B 02 B4
             F3 BC F5 BC 7B 02 7B 03 7B 02 C0 66 1D 8C 66 80 B6 B4 C1 7B 02 B4
             F6 B7 F7 B9 7B 02 64 65 1E BB 7B 02 7B 02 7B 04 7B 02 61 02 5D 7A
             65 1F B9 65 20 BB 7B 02 7B 03 F1 B2 65 21 B5 65 22 66 1D 66 1D 66
             1D 66 1D 7B 04 65 23 66 1B 66 24 8C 66 80 7A AB 14 C1 E6 C0 E7 C1
             65 24 F3 66 1F 03 25 5D 7A 7B 09 65 26 65 27 66 21 66 21 66 21 66
             21 7B 05 7B 02 65 28 66 21 65 29 BC 66 1E 7B 03 7B 03 65 2A 04 18
             7A 65 1F C1 65 2B 65 2C 66 26 66 26 7B 03 65 2D 66 26 7B 02 66 26
             7B 04 7B 03 7B 07 65 2E B8 7B 02 7B 04 7B 03 7B 04 61 03 16 05 F8
             61 03 19 11 AE 2F 02 19 03 DF E0 B1 E1 B0 E2 6F 09 E4 B3 E5 33 07
             1F 00 1B FF 5F 04 1B 1B FF 82)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR| 6.
        7. |EXT|::|SOURCE-PROGRAM-ERROR| :|FORM| :|DETAIL|
        "~S: ~S does not match lambda list element ~:S" |SYSTEM|::|TEXT|
        |CL-PPCRE|::|DO-SCANS|
        #1=(|CL-PPCRE|::|MATCH-START| |CL-PPCRE|::|MATCH-END|
            |CL-PPCRE|::|REG-STARTS| |CL-PPCRE|::|REG-ENDS| |CL-PPCRE|::|REGEX|
            |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&OPTIONAL|
            |CL-PPCRE|::|RESULT-FORM| |COMMON-LISP|::|&KEY| |CL-PPCRE|::|START|
            |CL-PPCRE|::|END|)
        :|START| :|END| (:|END| :|START|) "TARGET-STRING" |COMMON-LISP|::|LET|
        "%START" "%END" "%REGEX" "SCANNER" "LOOP-TAG" "BLOCK-NAME"
        |COMMON-LISP|::|BLOCK| |COMMON-LISP|::|LET*| |COMMON-LISP|::|OR| (0.)
        |COMMON-LISP|::|LENGTH| |COMMON-LISP|::|TYPECASE|
        |COMMON-LISP|::|FUNCTION| |CL-PPCRE|::|CREATE-SCANNER|
        |COMMON-LISP|::|SETQ| |CL-PPCRE|::|MAYBE-COERCE-TO-SIMPLE-STRING|
        |COMMON-LISP|::|TAGBODY| |COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        |CL-PPCRE|::|SCAN| :|REAL-START-POS| (0.) |COMMON-LISP|::|DECLARE|
        |COMMON-LISP|::|IGNORABLE| |COMMON-LISP|::|UNLESS|
        |COMMON-LISP|::|RETURN-FROM| |COMMON-LISP|::|LOCALLY|
        |COMMON-LISP|::|IF| |COMMON-LISP|::|=| |COMMON-LISP|::|1+|
        |COMMON-LISP|::|GO|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Iterates over TARGET-STRING and tries to match REGEX as often as\n
possible evaluating BODY with MATCH-START, MATCH-END, REG-STARTS, and\n
REG-ENDS bound to the four return values of each match in turn. After\n
the last match, returns RESULT-FORM if provided or NIL otherwise. An\n
implicit block named NIL surrounds DO-SCANS; RETURN may be used to\n
terminate the loop immediately. If REGEX matches an empty string the\n
scan is continued one position behind this match. BODY may start with\n
declarations."
       1)
    (#1# |COMMON-LISP|::|&BODY| |CL-PPCRE|::|BODY|
     |COMMON-LISP|::|&ENVIRONMENT| |CL-PPCRE|::|ENV|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|427 448 (DEFMACRO DO-MATCHES (# &BODY BODY) ...)-15|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|DO-MATCHES| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|DO-MATCHES|
       #118Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 80 4F 9F 5C
             78 AC DD DE 64 2D 04 01 1D 80 47 AC 94 00 9E 5C 78 9F 5C 5C 78 A0
             5C 5C 5C 78 B0 71 A2 A2 5C 5C 5C 5C 79 AC E6 63 72 9F AD E7 63 72
             9F A9 5C 79 AF E8 31 6A E9 72 AA EA 72 AA EB B7 B7 B0 B0 B9 B9 B9
             E6 B9 E7 BA 7B 0B A1 5D 5D 19 10 AE 2F 02 19 03 DF E0 B1 E1 B0 E2
             6F 09 E4 B3 E5 33 07 1F)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR| 4.
        5. |EXT|::|SOURCE-PROGRAM-ERROR| :|FORM| :|DETAIL|
        "~S: ~S does not match lambda list element ~:S" |SYSTEM|::|TEXT|
        |CL-PPCRE|::|DO-MATCHES|
        #1=(|CL-PPCRE|::|MATCH-START| |CL-PPCRE|::|MATCH-END|
            |CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING|
            |COMMON-LISP|::|&OPTIONAL| |CL-PPCRE|::|RESULT-FORM|
            |COMMON-LISP|::|&KEY| |CL-PPCRE|::|START| |CL-PPCRE|::|END|)
        :|START| :|END| (:|END| :|START|) "REG-STARTS" "REG-ENDS"
        |CL-PPCRE|::|DO-SCANS|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Iterates over TARGET-STRING and tries to match REGEX as often as\n
possible evaluating BODY with MATCH-START and MATCH-END bound to the\n
start/end positions of each match in turn. After the last match,\n
returns RESULT-FORM if provided or NIL otherwise. An implicit block\n
named NIL surrounds DO-MATCHES; RETURN may be used to terminate the\n
loop immediately. If REGEX matches an empty string the scan is\n
continued one position behind this match. BODY may start with\n
declarations."
       1)
    (#1# |COMMON-LISP|::|&BODY| |CL-PPCRE|::|BODY|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|450 473 (DEFMACRO DO-MATCHES-AS-STRINGS (# &BODY BODY) ...)-16|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|DO-MATCHES-AS-STRINGS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|DO-MATCHES-AS-STRINGS|
       #164Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 80 7D 9F 5C
             78 AC DD DE 64 2D 04 01 1D 80 75 AC 94 00 9E 5C 78 9F 5C 5C 78 A0
             5C 5C 5C 78 A1 5C 5C 5C 79 AC E6 63 72 9F AD E7 63 72 9F AE E8 63
             72 9F A9 5C 79 B0 E9 31 6A EA 72 AA EB AD B5 7B 02 7B 01 EC 72 AA
             ED 72 AA EE 72 AA EB AD EF B6 03 16 5D 7A 7B 02 7B 01 F1 B1 B1 BE
             B7 BE E6 BE E7 BF 7B 09 EB BF F2 B3 B9 B7 B7 7B 05 7B 02 7B 01 A9
             5D 7A 7B 03 61 03 16 02 F8 61 03 19 0F AE 2F 02 19 03 DF E0 B1 E1
             B0 E2 6F 09 E4 B3 E5 33 07 1F)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR| 3.
        4. |EXT|::|SOURCE-PROGRAM-ERROR| :|FORM| :|DETAIL|
        "~S: ~S does not match lambda list element ~:S" |SYSTEM|::|TEXT|
        |CL-PPCRE|::|DO-MATCHES-AS-STRINGS|
        #1=(|CL-PPCRE|::|MATCH-VAR| |CL-PPCRE|::|REGEX|
            |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&OPTIONAL|
            |CL-PPCRE|::|RESULT-FORM| |COMMON-LISP|::|&KEY| |CL-PPCRE|::|START|
            |CL-PPCRE|::|END| |CL-PPCRE|::|SHAREDP|)
        :|START| :|END| :|SHAREDP| (:|SHAREDP| :|END| :|START|) "TARGET-STRING"
        |COMMON-LISP|::|LET| "MATCH-START" "MATCH-END" "SUBSTR-FN"
        |COMMON-LISP|::|IF| (#'|CL-PPCRE|::|NSUBSEQ| #'|COMMON-LISP|::|SUBSEQ|)
        |CL-PPCRE|::|DO-MATCHES| |COMMON-LISP|::|FUNCALL|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Iterates over TARGET-STRING and tries to match REGEX as often as\n
possible evaluating BODY with MATCH-VAR bound to the substring of\n
TARGET-STRING corresponding to each match in turn. After the last\n
match, returns RESULT-FORM if provided or NIL otherwise. An implicit\n
block named NIL surrounds DO-MATCHES-AS-STRINGS; RETURN may be used to\n
terminate the loop immediately. If REGEX matches an empty string the\n
scan is continued one position behind this match. If SHAREDP is true,\n
the substrings may share structure with TARGET-STRING. BODY may start\n
with declarations."
       1)
    (#1# |COMMON-LISP|::|&BODY| |CL-PPCRE|::|BODY|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|475 512 (DEFMACRO DO-REGISTER-GROUPS (VAR-LIST # &BODY ...) ...)-17|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|DO-REGISTER-GROUPS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|DO-REGISTER-GROUPS|
       #242Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 80 7A 9F 5C
             78 A0 5C 5C 78 AC DD DA 64 2D 04 01 1D 80 6E AC 94 00 9E 5C 78 9F
             5C 5C 78 A0 5C 5C 79 AC E5 63 72 9F AD E6 63 72 9F AE E7 63 72 9F
             A9 5C 5C 79 B0 E8 31 6A E9 72 AA EA AD B5 7B 02 7B 01 EB 72 AA EC
             72 AA ED 72 AA EE 72 AA EF 72 AA F0 72 AA EA B2 F1 B9 03 18 5D 7A
             7B 02 7B 01 F3 B3 B3 B3 B3 C3 BC C3 E5 C3 E6 C4 7B 0B EA 63 66 19
             6F 1A 01 04 03 1B F9 1B 80 4B AE 2F 02 19 03 DE DF B2 E0 B0 E1 6F
             08 E3 B3 E4 33 07 1F 87 04 05 5B FB A2 5C 5B FA 1D 29 14 EA B9 F6
             BD B2 7B 03 7B 02 7B 01 F1 BB F7 B5 F7 C4 66 1C C1 F6 C4 BA 7B 03
             7B 05 7B 03 03 1E 5D 5D 7A 7B 03 7B 02 84 00 83 04 85 01 B0 8D 9F
             44 AC 31 B1 16 05 F8 04 0F 5D 7A 7B 03 61 03 16 05 F8 61 03 19 0F)
       (3. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR| 2.
        |EXT|::|SOURCE-PROGRAM-ERROR| :|FORM| :|DETAIL|
        "~S: ~S does not match lambda list element ~:S" |SYSTEM|::|TEXT|
        |CL-PPCRE|::|DO-REGISTER-GROUPS|
        #1=(|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING|
            |COMMON-LISP|::|&OPTIONAL| |CL-PPCRE|::|RESULT-FORM|
            |COMMON-LISP|::|&KEY| |CL-PPCRE|::|START| |CL-PPCRE|::|END|
            |CL-PPCRE|::|SHAREDP|)
        :|START| :|END| :|SHAREDP| (:|SHAREDP| :|END| :|START|) "TARGET-STRING"
        |COMMON-LISP|::|LET| "SUBSTR-FN" "MATCH-START" "MATCH-END" "REG-STARTS"
        "REG-ENDS" "START-INDEX" |COMMON-LISP|::|IF|
        (#'|CL-PPCRE|::|NSUBSEQ| #'|COMMON-LISP|::|SUBSEQ|)
        |CL-PPCRE|::|DO-SCANS| |CL-PPCRE|::|NORMALIZE-VAR-LIST| 0.
        |COMMON-LISP|::|AREF| |COMMON-LISP|::|FUNCALL| (|COMMON-LISP|::|NIL|))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Iterates over TARGET-STRING and tries to match REGEX as often as\n
possible evaluating BODY with the variables in VAR-LIST bound to the\n
corresponding register groups for each match in turn, i.e. each\n
variable is either bound to a string or to NIL. For each element of\n
VAR-LIST which is NIL there's no binding to the corresponding register\n
group. The number of variables in VAR-LIST must not be greater than\n
the number of register groups. After the last match, returns\n
RESULT-FORM if provided or NIL otherwise. An implicit block named NIL\n
surrounds DO-REGISTER-GROUPS; RETURN may be used to terminate the loop\n
immediately. If REGEX matches an empty string the scan is continued\n
one position behind this match. If SHAREDP is true, the substrings may\n
share structure with TARGET-STRING. BODY may start with declarations."
       1)
    (|CL-PPCRE|::|VAR-LIST| #1# |COMMON-LISP|::|&BODY| |CL-PPCRE|::|BODY|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|514 528 (DEFUN ALL-MATCHES (REGEX TARGET-STRING &KEY ...) ...)-18|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|ALL-MATCHES| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|ALL-MATCHES|
       #112Y(00 00 00 00 02 00 00 00 A6 1D 02 00 00 00 3B 02 02 C7 FA 3B 01 04
             AF 81 62 01 63 B0 92 04 01 C7 14 92 04 03 AD 32 62 14 B4 8E 2F 0F
             B4 2F 03 14 AF 8E 36 0A AF DE 81 3B 03 1B 1C A5 1B 71 A0 FB 1B 15
             AE 32 B1 1B 0D AF 84 08 AE 84 08 AF AF 90 01 2F 6F 9F FE 16 04 AC
             B0 DA B1 DB B2 DF 92 0E 01 C7 14 2D 08 06 42 04 92 03 5C B4 32 64
             19 0E)
       (:|START| :|END| 0. |CL-PPCRE|::|CREATE-SCANNER|
        |COMMON-LISP|::|SIMPLE-STRING| :|REAL-START-POS| |CL-PPCRE|::|SCAN|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END|
         (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|)))
       "Returns a list containing the start and end positions of all\n
matches of REGEX against TARGET-STRING, i.e. if there are N matches\n
the list contains (* 2 N) elements. If REGEX matches an empty string\n
the scan is continued one position behind this match."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|530 537 (DEFINE-COMPILER-MACRO ALL-MATCHES (&WHOLE FORM &ENVIRONMENT ...) ...)-19-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|ALL-MATCHES| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at\n
compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|530 537 (DEFINE-COMPILER-MACRO ALL-MATCHES (&WHOLE FORM &ENVIRONMENT ...) ...)-19-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|ALL-MATCHES|
       #55Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            0E 9F 5C 78 A0 5C 79 AD B0 8C 66 08 A1 19 05 AE 2F 03 19 03 DE DF
            E0 B0 7B 02 7B 02 9F 5D 5D 19 05)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|ALL-MATCHES|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at\n
compile time."
       1)
    |CL-PPCRE|::|ALL-MATCHES|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|530 537 (DEFINE-COMPILER-MACRO ALL-MATCHES (&WHOLE FORM &ENVIRONMENT ...) ...)-19-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01) (|CL-PPCRE|::|ALL-MATCHES|)
   |COMMON-LISP|::|NIL|)
#Y(#:|539 551 (DEFUN ALL-MATCHES-AS-STRINGS (REGEX TARGET-STRING &KEY ...) ...)-20|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|ALL-MATCHES-AS-STRINGS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|ALL-MATCHES-AS-STRINGS|
       #128Y(00 00 00 00 02 00 00 00 A6 1D 03 00 00 00 3B 03 02 C8 FB 3B 02 04
             B0 81 62 02 3D 01 63 92 02 22 CA 14 B2 92 06 01 C8 14 92 06 03 AD
             32 62 14 B6 8E 2F 13 B6 2F 06 14 AF 8E 36 0E AF E1 81 3B 03 1B 25
             98 04 1B 5B A7 1B 6D A0 FB 1B 1A AE 32 B1 1B 12 B4 BB B1 B1 76 03
             AC 84 0A 16 01 AF AF 90 01 2F 6A 9F FE 16 04 AC B0 DA B1 DB B2 E2
             92 10 01 C8 14 2D 08 09 42 04 92 03 57 B5 32 64 19 10)
       (:|START| :|END| :|SHAREDP| 0. |CL-PPCRE|::|NSUBSEQ|
        #.#'|COMMON-LISP|::|SUBSEQ| |CL-PPCRE|::|CREATE-SCANNER|
        |COMMON-LISP|::|SIMPLE-STRING| :|REAL-START-POS| |CL-PPCRE|::|SCAN|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END|
         (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
        |CL-PPCRE|::|SHAREDP|)
       "Returns a list containing all substrings of TARGET-STRING which\n
match REGEX. If REGEX matches an empty string the scan is continued\n
one position behind this match. If SHAREDP is true, the substrings may\n
share structure with TARGET-STRING."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|553 561 (DEFINE-COMPILER-MACRO ALL-MATCHES-AS-STRINGS (&WHOLE FORM &ENVIRONMENT ...) ...)-21-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|ALL-MATCHES-AS-STRINGS| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at\n
compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|553 561 (DEFINE-COMPILER-MACRO ALL-MATCHES-AS-STRINGS (&WHOLE FORM &ENVIRONMENT ...) ...)-21-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|ALL-MATCHES-AS-STRINGS|
       #55Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            0E 9F 5C 78 A0 5C 79 AD B0 8C 66 08 A1 19 05 AE 2F 03 19 03 DE DF
            E0 B0 7B 02 7B 02 9F 5D 5D 19 05)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|ALL-MATCHES-AS-STRINGS|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at\n
compile time."
       1)
    |CL-PPCRE|::|ALL-MATCHES-AS-STRINGS|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|553 561 (DEFINE-COMPILER-MACRO ALL-MATCHES-AS-STRINGS (&WHOLE FORM &ENVIRONMENT ...) ...)-21-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01)
   (|CL-PPCRE|::|ALL-MATCHES-AS-STRINGS|) |COMMON-LISP|::|NIL|)
#Y(#:|563 632 (DEFUN SPLIT (REGEX TARGET-STRING &KEY ...) ...)-22|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|SPLIT| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|SPLIT|
       #308Y(00 00 00 00 02 00 00 00 A6 1D 06 00 00 00 3B 06 02 CB FE 3B 05 04
             B3 81 62 05 3D 04 3D 03 3D 02 3D 01 B2 7B 01 E0 B2 25 06 02 7D 06
             B5 92 09 01 CB 14 92 09 03 AD 32 62 14 B9 8E 2F 80 7A B9 2F 07 14
             AF 8E 36 80 75 AF E2 81 3B 03 AC B0 DA B1 DB B2 E3 92 13 01 CB 14
             2D 08 0A 42 04 93 03 80 85 AF AF 91 01 2F 08 AF 94 0A 90 01 2F 80
             66 93 0E 09 85 08 14 BB 90 01 34 80 46 AF 84 09 93 0D 80 50 E0 01
             04 A2 FA CB F9 B0 B3 72 62 90 01 34 3F B2 B1 82 01 01 03 AD AF 72
             62 90 01 34 31 AE AE 82 01 01 00 92 03 1D 92 11 07 63 84 0E 00 14
             84 0E 85 04 85 01 1B 51 AA 1B FF 85 A0 FB 1B FF 8B 16 07 1B 23 14
             84 0E 9D 1B 64 AE 32 B1 1B 0C 16 05 AE 84 09 AF AF 90 01 2F 70 9F
             FE 16 04 1B FF 6A 98 0B 1B 0C 16 07 16 01 B3 84 01 63 92 04 71 D1
             14 63 B0 01 03 1B 2E AE AE 82 01 32 04 1D 22 1B 14 A0 FE 5B FA A3
             5C 5B F9 92 0D 09 92 04 03 92 01 65 FC 1D 0C 93 01 06 B1 BD AF B1
             36 03 14 84 00 A0 5C 5C FB A0 21 59 AC 31 B1 16 06 F8 32 64 19 0B)
       (:|START| :|END| :|LIMIT| :|WITH-REGISTERS-P| :|OMIT-UNMATCHED-P|
        :|SHAREDP| 0. |CL-PPCRE|::|CREATE-SCANNER|
        |COMMON-LISP|::|SIMPLE-STRING| :|REAL-START-POS| |CL-PPCRE|::|SCAN|
        |CL-PPCRE|::|NSUBSEQ| #.#'|COMMON-LISP|::|SUBSEQ|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING| |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END|
         (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
        |CL-PPCRE|::|LIMIT| |CL-PPCRE|::|WITH-REGISTERS-P|
        |CL-PPCRE|::|OMIT-UNMATCHED-P| |CL-PPCRE|::|SHAREDP|)
       "Matches REGEX against TARGET-STRING as often as possible and\n
returns a list of the substrings between the matches. If\n
WITH-REGISTERS-P is true, substrings corresponding to matched\n
registers are inserted into the list as well. If OMIT-UNMATCHED-P is\n
true, unmatched registers will simply be left out, otherwise they will\n
show up as NIL. LIMIT limits the number of elements returned -\n
registers aren't counted. If LIMIT is NIL (or 0 which is equivalent),\n
trailing empty strings are removed from the result list.  If REGEX\n
matches an empty string the scan is continued one position behind this\n
match. If SHAREDP is true, the substrings may share structure with\n
TARGET-STRING."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|634 640 (DEFINE-COMPILER-MACRO SPLIT (&WHOLE FORM &ENVIRONMENT ...) ...)-23-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|SPLIT| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|634 640 (DEFINE-COMPILER-MACRO SPLIT (&WHOLE FORM &ENVIRONMENT ...) ...)-23-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|SPLIT|
       #62Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            13 9F 5C 78 A0 5C 5C 78 A1 5C 5C 79 AE B1 8C 66 08 A2 19 06 AE 2F
            03 19 03 DE DF E0 B1 7B 02 7B 02 AF A0 5D 5D 5D 19 06)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 3. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|SPLIT|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at compile time."
       1)
    |CL-PPCRE|::|SPLIT|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|634 640 (DEFINE-COMPILER-MACRO SPLIT (&WHOLE FORM &ENVIRONMENT ...) ...)-23-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01) (|CL-PPCRE|::|SPLIT|)
   |COMMON-LISP|::|NIL|)
#Y(#:|642 704 (DEFUN STRING-CASE-MODIFIER (STR FROM TO ...) ...)-24|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|STRING-CASE-MODIFIER| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|STRING-CASE-MODIFIER|
       #173Y(00 00 00 00 05 00 00 00 26 06 AF B1 90 01 33 31 AE B1 91 01 31 0F
             B1 97 05 71 31 8D 27 07 B1 B1 71 31 8C 27 1C AF AE 91 01 31 0F B1
             B0 71 31 8D 27 08 B1 97 04 71 31 8C 27 07 01 02 B2 63 1B 80 51 00
             1B 80 56 7D 03 1B 80 46 9F 26 00 06 C6 1B 3C 9F 1B 39 00 1B 36 92
             03 70 9F 26 02 06 C8 1B 2C 9F 1B 29 00 1B 26 B5 AE 80 31 00 14 8D
             25 55 AC 8C 23 63 9F 26 04 14 CA 1B 12 CB 1B 0F 9F 1B 0C 9F 1B 09
             92 03 7A 00 16 04 1B 0F 00 FA 7E 03 85 01 AD B4 91 01 34 4F 9F 16
             04 26 07 0C CD 19 06 CE 19 06 CF 19 06 D0 19 06 00 19 06)
       (#S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|UPCASE| . 4.) (:|CAPITALIZE| . 58.) (:|DOWNCASE| . 58.)
           (:|UNDECIDED| . 1.))
        :|UPCASE|
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|UPCASE| . 4.) (:|CAPITALIZE| . 4.) (:|DOWNCASE| . 42.)
           (|COMMON-LISP|::|NIL| . 1.))
        :|UNDECIDED|
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|UPCASE| . 16.) (:|CAPITALIZE| . 13.) (:|DOWNCASE| . 7.)
           (:|UNDECIDED| . 4.) (|COMMON-LISP|::|NIL| . 1.))
        :|DOWNCASE| :|CAPITALIZE|
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|CAPITALIZE| . 10.) (:|DOWNCASE| . 7.) (:|UPCASE| . 4.)
           (:|UNDECIDED| . 4.) (|COMMON-LISP|::|NIL| . 1.))
        #.#'|COMMON-LISP|::|IDENTITY| #.#'|COMMON-LISP|::|STRING-UPCASE|
        #.#'|COMMON-LISP|::|STRING-DOWNCASE|
        #.#'|COMMON-LISP|::|STRING-CAPITALIZE|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|STR| |CL-PPCRE|::|FROM| |CL-PPCRE|::|TO|
        |CL-PPCRE|::|START| |CL-PPCRE|::|END|)
       "Checks whether all words in STR between FROM and TO are upcased,\n
downcased or capitalized and returns a function which applies a\n
corresponding case modification to strings. Returns #'IDENTITY\n
otherwise, especially if words in the target area extend beyond FROM\n
or TO. STR is supposed to be bounded by START and END. It is assumed\n
that (<= START FROM TO END)."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|706 713 (DEFGENERIC BUILD-REPLACEMENT-TEMPLATE (REPLACEMENT-STRING) ...)-25|
   #120Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DA
         6F 04 2D 03 05 6B 06 99 07 DA E2 AF E3 E4 E5 E6 E7 E8 E9 EA EB 01 03
         BC 6F 12 1B 24 AF 38 01 80 A9 03 14 AD 31 B8 16 02 1B 14 94 00 94 00
         9E 5C 5C 78 76 00 7B 02 A1 21 63 9D FC FB 16 02 83 00 AC 8D 9F 66 16
         01 9E 16 01 F8 ED 6B 14 EF BE F0 DA 6E 03 17 F2 63 6E 03 19 7B 04 33
         02 23 9B 0D 02)
   (|CL-PPCRE|::|BUILD-REPLACEMENT-TEMPLATE| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1| |CLOS|::|DEFGENERIC| |SYSTEM|::|FBOUND-STRING|
    |SYSTEM|::|CHECK-REDEFINITION| |CLOS|::|<STANDARD-GENERIC-FUNCTION>|
    |CLOS|::|ENSURE-GENERIC-FUNCTION| :|GENERIC-FUNCTION-CLASS| :|LAMBDA-LIST|
    (|CL-PPCRE|::|REPLACEMENT-STRING|) :|ARGUMENT-PRECEDENCE-ORDER|
    (|CL-PPCRE|::|REPLACEMENT-STRING|) :|DOCUMENTATION|
    "Converts a replacement string for REGEX-REPLACE or\n
REGEX-REPLACE-ALL into a replacement template which is an\n
S-expression."
    :|DECLARATIONS|
    ((|COMMON-LISP|::|OPTIMIZE| |COMMON-LISP|::|SPEED|
      (|COMMON-LISP|::|SAFETY| 0.) (|COMMON-LISP|::|SPACE| 0.)
      (|COMMON-LISP|::|DEBUG| 1.) (|COMMON-LISP|::|COMPILATION-SPEED| 0.)))
    |CLOS|::|METHODS| |CLOS|::|CLASS-DEFAULT-INITARGS| :|METHOD-CLASS|
    |CLOS|::|<STANDARD-METHOD>| :|METHOD-COMBINATION| :|NAME|
    |CLOS|::|MAKE-GENERIC-FUNCTION-PROTOTYPE| |CLOS|::|STANDARD|
    |CLOS|::|FIND-METHOD-COMBINATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|715 756 (LET* (# #) (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE # ...))-26|
   #59Y(00 00 00 00 00 00 00 00 20 01 00 2B 01 00 10 00 DB 2F 02 0B 03 00 DD DE
        38 01 8F 9E 03 DD 2F 05 DD B0 6D 06 01 E1 63 E2 E3 E4 E5 E6 E7 38 02 72
        3A 7B 01 7B 08 2D 03 0E 11 19 02)
   (|CL-PPCRE|::|*USE-BMH-MATCHERS*| "\\\\(?:\\\\|\\{\\d+\\}|\\d+|&|`|')"
    |CL-PPCRE|::|CREATE-SCANNER| |CL-PPCRE|::|BUILD-REPLACEMENT-TEMPLATE|
    |SYSTEM|::|TRACED-DEFINITION| |SYSTEM|::|UNTRACE1|
    #Y(#:|715 756 (LET* (# #) (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE # ...))-26-1|
       #19Y(00 00 00 00 01 00 00 00 20 02 2A 14 6D 01 01 C7 5D 19 02)
       (|COMMON-LISP|::|NIL|
        #Y(#:|715 756 (LET* (# #) (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE # ...))-26-1-1|
           #193Y(00 00 00 00 01 00 00 00 20 02 DB 63 AF DB AD 72 62 69 00 01 AC
                 8E 2F 10 AC 2F 02 14 B0 8E 36 0B B0 DD 81 3B 04 1B 80 71 9D 1B
                 70 A1 FC 1B 80 69 B9 AD 38 02 64 71 8A 32 B2 1B 80 42 B6 B0 91
                 01 31 07 B8 B7 B1 72 60 84 09 E2 B9 38 04 A6 FA A5 F9 72 7B 92
                 00 5A B9 96 05 31 31 26 09 1F CF 1B 1D D0 1B 1A D1 1B 17 D2 1B
                 14 E8 E9 EA EB BE B6 B6 72 60 7B 01 33 04 1E AE 32 B1 1B 19 00
                 14 AC 8F 1A 04 AC 8E AE 63 AC 84 0B 16 02 9F 09 0A AF AF 90 01
                 2F 63 9F FF 16 04 AC B1 DE B2 DF B3 E0 DB 2D 08 07 42 04 92 03
                 FF 92 16 09 AD B0 72 62 91 01 31 08 AF AE 38 01 72 60 84 00 AC
                 32 64 19 04)
           (|COMMON-LISP|::|NIL| 0. |CL-PPCRE|::|CREATE-SCANNER|
            |COMMON-LISP|::|SIMPLE-STRING| :|START| :|END| :|REAL-START-POS|
            |CL-PPCRE|::|SCAN| #.#'|COMMON-LISP|::|DIGIT-CHAR-P|
            #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
               (#\\ . 10.) (#\' . 7.) (#\` . 4.) (#\& . 1.))
            :|MATCH| :|BEFORE-MATCH| :|AFTER-MATCH| :|BACKSLASH|
            |CL-PPCRE|::|PPCRE-INVOCATION-ERROR| :|FORMAT-CONTROL|
            "Illegal substring ~S in replacement string" :|FORMAT-ARGUMENTS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST| (|CL-PPCRE|::|REPLACEMENT-STRING|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|STRING| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|758 761 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-27|
   #43Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 7B 01 7B 08 2D 03 0B 19 01)
   (|CL-PPCRE|::|BUILD-REPLACEMENT-TEMPLATE| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1|
    #Y(#:|758 761 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-27-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|758 761 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-27-1-1|
           #15Y(00 00 00 00 01 00 00 00 20 02 AD 61 01 19 02) ()
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST| (|CL-PPCRE|::|REPLACEMENT-FUNCTION|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|FUNCTION| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|763 766 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-28|
   #43Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 7B 01 7B 08 2D 03 0B 19 01)
   (|CL-PPCRE|::|BUILD-REPLACEMENT-TEMPLATE| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1|
    #Y(#:|763 766 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-28-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|763 766 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-28-1-1|
           #15Y(00 00 00 00 01 00 00 00 20 02 AD 61 01 19 02) ()
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST| (|CL-PPCRE|::|REPLACEMENT-FUNCTION-SYMBOL|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|SYMBOL| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|768 771 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-29|
   #43Y(00 00 00 00 00 00 00 00 20 01 DA DB 38 01 8F 9E 03 DA 2F 02 DA DD DE 63
        DF E0 E1 E2 E3 E4 38 02 72 3A 7B 01 7B 08 2D 03 0B 19 01)
   (|CL-PPCRE|::|BUILD-REPLACEMENT-TEMPLATE| |SYSTEM|::|TRACED-DEFINITION|
    |SYSTEM|::|UNTRACE1|
    #Y(#:|768 771 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-29-1|
       #15Y(00 00 00 00 01 00 00 00 20 02 DA C6 5D 19 02)
       (#Y(#:|768 771 (DEFMETHOD BUILD-REPLACEMENT-TEMPLATE (#) ...)-29-1-1|
           #13Y(00 00 00 00 01 00 00 00 20 02 9E 19 02) ()
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
        (|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
    :|QUALIFIERS| :|LAMBDA-LIST| (|CL-PPCRE|::|REPLACEMENT-LIST|)
    |CLOS|::|SIGNATURE|
    #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
      |COMMON-LISP|::|NIL|)
    :|SPECIALIZERS| |COMMON-LISP|::|LIST| |CLOS|::|DO-DEFMETHOD|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|773 912 (DEFUN BUILD-REPLACEMENT (REPLACEMENT-TEMPLATE TARGET-STRING START ...) ...)-30|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|BUILD-REPLACEMENT| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|BUILD-REPLACEMENT|
       #256Y(03 00 01 00 0A 00 00 00 26 00 00 2B 01 7F 0A 00 00 92 05 3B C5 14
             AF 38 01 72 8F 53 80 D7 BB 63 AD 8C 9F 80 CA 87 01 00 14 8E 19 29
             AC 8E 1E 33 AC 8F 2F 80 63 92 09 80 43 AC 68 07 00 BD BD BD BD BD
             BD 36 07 14 B1 38 02 31 95 83 01 1B 51 14 DA 31 08 1B 40 9D 1B 6D
             DB DC DD DE 96 04 7B 01 33 04 1E AC B2 90 01 34 6F B7 9E 5F 1D 5D
             68 06 00 B1 B9 A0 5F 14 B9 A1 5F 1B 80 45 AC 68 07 00 BA BC 73 01
             38 38 05 B2 80 06 03 B2 C2 80 1D 00 DF B5 2C 06 01 1B 80 4C AC 8F
             18 FF AE 9D 26 07 26 E2 B1 31 94 1B FF A3 68 06 00 B1 BB 04 0F 1B
             10 68 06 00 B1 BD 04 10 1B 07 68 06 00 B1 BA 04 11 14 31 95 1B FF
             84 93 09 FF 6E AC 68 07 00 BA BC 73 01 38 38 05 B2 80 06 03 B2 C2
             80 1D 00 DF B5 2C 09 01 14 BB BB 33 01 27 37 01 1B FF 56 16 02 AE
             32 90 54 67 00 00 00 38 01 32 97 55 19 0E)
       (0. |CL-PPCRE|::|PPCRE-INVOCATION-ERROR| :|FORMAT-CONTROL|
        "Reference to non-existent register ~A in replacement string"
        :|FORMAT-ARGUMENTS| |COMMON-LISP|::|LIST|
        #Y(|CL-PPCRE|::|BUILD-REPLACEMENT-1|
           #35Y(00 00 00 00 02 00 00 00 26 03 9F 1F 14 69 00 01 AE B0 73 01 38
                38 05 B2 80 06 03 B2 B6 31 1D 19 04 19 03)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
           (|CL-PPCRE|::|REG-START| |CL-PPCRE|::|REG-END|) |COMMON-LISP|::|NIL|
           1)
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|AFTER-MATCH| . 26.) (:|BEFORE-MATCH| . 17.) (:|MATCH| . 8.)
           (:|BACKSLASH| . 1.))
        #\\
        #Y(|CL-PPCRE|::|BUILD-REPLACEMENT-2|
           #35Y(00 00 00 00 02 00 00 00 26 03 9F 1F 14 69 00 01 AE B0 73 01 38
                38 05 B2 80 06 03 B2 B6 31 1D 19 04 19 03)
           (|COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
           (|CL-PPCRE|::|REG-START| |CL-PPCRE|::|REG-END|) |COMMON-LISP|::|NIL|
           1))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REPLACEMENT-TEMPLATE| |CL-PPCRE|::|TARGET-STRING|
        |CL-PPCRE|::|START| |CL-PPCRE|::|END| |CL-PPCRE|::|MATCH-START|
        |CL-PPCRE|::|MATCH-END| |CL-PPCRE|::|REG-STARTS| |CL-PPCRE|::|REG-ENDS|
        |CL-PPCRE|::|SIMPLE-CALLS| |CL-PPCRE|::|ELEMENT-TYPE|)
       "Accepts a replacement template and the current values from the\n
matching process in REGEX-REPLACE or REGEX-REPLACE-ALL and returns the\n
corresponding string."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|914 954 (DEFUN REPLACE-AUX (TARGET-STRING REPLACEMENT POS-LIST ...) ...)-31|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|REPLACE-AUX| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REPLACE-AUX|
       #160Y(03 00 01 00 09 00 00 00 26 00 B4 6F 00 AE 38 01 72 8F 53 16 63 B6
             7B 01 B9 B7 7B 01 73 03 23 01 06 A3 21 11 16 08 AE 32 90 54 67 00
             00 00 38 01 32 97 55 19 0C A3 FF 5B FD A4 5C 5B FC 00 1B 80 58 C1
             B2 B2 C0 C0 6E 05 02 AD 36 01 1B 04 92 0F 70 9D 14 B7 38 02 31 95
             1B 2D 94 12 83 13 15 FA 93 03 05 94 12 83 13 15 F9 93 03 0D B7 C2
             BF BF B5 B5 B4 B4 C2 C2 2D 0A 01 F8 93 04 FF A6 92 03 4D C1 B7 B3
             B3 31 95 83 06 20 FF 98 A3 FF 5B FD A4 5C 5B FC A0 59 1D 01 A1 FB
             93 03 42 1B FF BA)
       (|CL-PPCRE|::|BUILD-REPLACEMENT-TEMPLATE|
        |CL-PPCRE|::|BUILD-REPLACEMENT| |CL-PPCRE|::|STRING-CASE-MODIFIER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|TARGET-STRING| |CL-PPCRE|::|REPLACEMENT|
        |CL-PPCRE|::|POS-LIST| |CL-PPCRE|::|REG-LIST| |CL-PPCRE|::|START|
        |CL-PPCRE|::|END| |CL-PPCRE|::|PRESERVE-CASE|
        |CL-PPCRE|::|SIMPLE-CALLS| |CL-PPCRE|::|ELEMENT-TYPE|)
       "Auxiliary function used by REGEX-REPLACE and\n
REGEX-REPLACE-ALL. POS-LIST contains a list with the start and end\n
positions of all matches while REG-LIST contains a list of arrays\n
representing the corresponding register start and end positions."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|956 1002 (DEFUN REGEX-REPLACE (REGEX TARGET-STRING REPLACEMENT ...) ...)-32|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|REGEX-REPLACE| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REGEX-REPLACE|
       #81Y(00 00 00 00 03 00 00 00 A6 1E 05 00 00 00 3B 05 02 CA FD 3B 04 04
            B3 81 62 04 3D 03 3D 02 3B 01 02 CB F9 B4 B4 DA B4 DB B5 2D 06 07
            42 04 92 03 0B B7 B6 B6 72 60 00 14 40 02 19 0D B7 B7 B1 B1 7B 02
            B0 B0 7B 02 B9 B9 B9 B9 B9 6E 09 08 02 1B 66)
       (:|START| :|END| :|PRESERVE-CASE| :|SIMPLE-CALLS| :|ELEMENT-TYPE| 0.
        |COMMON-LISP|::|CHARACTER| |CL-PPCRE|::|SCAN|
        |CL-PPCRE|::|REPLACE-AUX|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING|
        |CL-PPCRE|::|REPLACEMENT| |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END|
         (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
        |CL-PPCRE|::|PRESERVE-CASE| |CL-PPCRE|::|SIMPLE-CALLS|
        (|CL-PPCRE|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|))
       "Try to match TARGET-STRING between START and END against REGEX and\n
replace the first match with REPLACEMENT.  Two values are returned;\n
the modified string, and T if REGEX matched or NIL otherwise.\n\n
  REPLACEMENT can be a string which may contain the special substrings\n
\"\\&\" for the whole match, \"\\`\" for the part of TARGET-STRING\n
before the match, \"\\'\" for the part of TARGET-STRING after the\n
match, \"\\N\" or \"\\{N}\" for the Nth register where N is a positive\n
integer.\n\n
  REPLACEMENT can also be a function designator in which case the\n
match will be replaced with the result of calling the function\n
designated by REPLACEMENT with the arguments TARGET-STRING, START,\n
END, MATCH-START, MATCH-END, REG-STARTS, and REG-ENDS. (REG-STARTS and\n
REG-ENDS are arrays holding the start and end positions of matched\n
registers or NIL - the meaning of the other arguments should be\n
obvious.)\n\n
  Finally, REPLACEMENT can be a list where each element is a string,\n
one of the symbols :MATCH, :BEFORE-MATCH, or :AFTER-MATCH -\n
corresponding to \"\\&\", \"\\`\", and \"\\'\" above -, an integer N -\n
representing register (1+ N) -, or a function designator.\n\n
  If PRESERVE-CASE is true, the replacement will try to preserve the\n
case (all upper case, all lower case, or capitalized) of the\n
match. The result will always be a fresh string, even if REGEX doesn't\n
match.\n\n
  ELEMENT-TYPE is the element type of the resulting string."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1004 1011 (DEFINE-COMPILER-MACRO REGEX-REPLACE (&WHOLE FORM &ENVIRONMENT ...) ...)-33-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|REGEX-REPLACE| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1004 1011 (DEFINE-COMPILER-MACRO REGEX-REPLACE (&WHOLE FORM &ENVIRONMENT ...) ...)-33-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|REGEX-REPLACE|
       #70Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            19 9F 5C 78 A0 5C 5C 78 A1 5C 5C 5C 78 A2 5C 5C 5C 79 AF B2 8C 66
            08 A3 19 07 AE 2F 03 19 03 DE DF E0 B2 7B 02 7B 02 B0 B0 A1 5D 5D
            5D 5D 19 07)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 4. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|REGEX-REPLACE|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at compile time."
       1)
    |CL-PPCRE|::|REGEX-REPLACE|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1004 1011 (DEFINE-COMPILER-MACRO REGEX-REPLACE (&WHOLE FORM &ENVIRONMENT ...) ...)-33-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01) (|CL-PPCRE|::|REGEX-REPLACE|)
   |COMMON-LISP|::|NIL|)
#Y(#:|1013 1066 (DEFUN REGEX-REPLACE-ALL (REGEX TARGET-STRING REPLACEMENT ...) ...)-34|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|REGEX-REPLACE-ALL| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REGEX-REPLACE-ALL|
       #159Y(00 00 00 00 03 00 00 00 A6 1E 05 00 00 00 3B 05 02 CA FD 3B 04 04
             B3 81 62 04 3D 03 3D 02 3B 01 02 CB F9 01 02 B5 92 08 01 CA 14 92
             08 03 AD 32 62 14 B9 8E 2F 0F B9 2F 07 14 AF 8E 36 0A AF E2 81 3B
             03 1B 35 AA 1B 71 A0 FB 1B 2E AE 32 B1 1B 26 B5 B5 AF 72 64 AF 72
             64 B7 B7 B7 B7 B7 6E 09 0B 02 1B 36 AF 84 09 AE 84 09 AD 84 08 AC
             84 08 AF AF 90 01 2F 56 9F FE 16 04 AC B0 DA B1 DB B2 E3 92 12 01
             CA 14 2D 08 0A 42 04 92 03 56 16 08 92 01 FF BD B5 B4 B4 72 60 00
             14 40 02 19 0B)
       (:|START| :|END| :|PRESERVE-CASE| :|SIMPLE-CALLS| :|ELEMENT-TYPE| 0.
        |COMMON-LISP|::|CHARACTER| |CL-PPCRE|::|CREATE-SCANNER|
        |COMMON-LISP|::|SIMPLE-STRING| :|REAL-START-POS| |CL-PPCRE|::|SCAN|
        |CL-PPCRE|::|REPLACE-AUX|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|TARGET-STRING|
        |CL-PPCRE|::|REPLACEMENT| |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END|
         (|COMMON-LISP|::|LENGTH| |CL-PPCRE|::|TARGET-STRING|))
        |CL-PPCRE|::|PRESERVE-CASE| |CL-PPCRE|::|SIMPLE-CALLS|
        (|CL-PPCRE|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|))
       "Try to match TARGET-STRING between START and END against REGEX and\n
replace all matches with REPLACEMENT.  Two values are returned; the\n
modified string, and T if REGEX matched or NIL otherwise.\n\n
  REPLACEMENT can be a string which may contain the special substrings\n
\"\\&\" for the whole match, \"\\`\" for the part of TARGET-STRING\n
before the match, \"\\'\" for the part of TARGET-STRING after the\n
match, \"\\N\" or \"\\{N}\" for the Nth register where N is a positive\n
integer.\n\n
  REPLACEMENT can also be a function designator in which case the\n
match will be replaced with the result of calling the function\n
designated by REPLACEMENT with the arguments TARGET-STRING, START,\n
END, MATCH-START, MATCH-END, REG-STARTS, and REG-ENDS. (REG-STARTS and\n
REG-ENDS are arrays holding the start and end positions of matched\n
registers or NIL - the meaning of the other arguments should be\n
obvious.)\n\n
  Finally, REPLACEMENT can be a list where each element is a string,\n
one of the symbols :MATCH, :BEFORE-MATCH, or :AFTER-MATCH -\n
corresponding to \"\\&\", \"\\`\", and \"\\'\" above -, an integer N -\n
representing register (1+ N) -, or a function designator.\n\n
  If PRESERVE-CASE is true, the replacement will try to preserve the\n
case (all upper case, all lower case, or capitalized) of the\n
match. The result will always be a fresh string, even if REGEX doesn't\n
match.\n\n
  ELEMENT-TYPE is the element type of the resulting string."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1068 1075 (DEFINE-COMPILER-MACRO REGEX-REPLACE-ALL (&WHOLE FORM &ENVIRONMENT ...) ...)-35-1|
   #19Y(00 00 00 00 00 00 00 00 20 01 DA DB DC 2D 03 03 3E 19 01)
   (|CL-PPCRE|::|REGEX-REPLACE-ALL| |COMMON-LISP|::|COMPILER-MACRO|
    "Make sure that constant forms are compiled into scanners at compile time."
    |SYSTEM|::|%SET-DOCUMENTATION|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1068 1075 (DEFINE-COMPILER-MACRO REGEX-REPLACE-ALL (&WHOLE FORM &ENVIRONMENT ...) ...)-35-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA AC DB 30 02 16 01 3E 19 01)
   (#Y(|CL-PPCRE|::|REGEX-REPLACE-ALL|
       #70Y(00 00 00 00 02 00 00 00 26 03 AE 2F 00 FA 14 DB DB 64 2D 04 02 1D
            19 9F 5C 78 A0 5C 5C 78 A1 5C 5C 5C 78 A2 5C 5C 5C 79 AF B2 8C 66
            08 A3 19 07 AE 2F 03 19 03 DE DF E0 B2 7B 02 7B 02 B0 B0 A1 5D 5D
            5D 5D 19 07)
       (|SYSTEM|::|STRIP-FUNCALL-FORM| 4. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P|
        |SYSTEM|::|MACRO-CALL-ERROR| |CL-PPCRE|::|REGEX-REPLACE-ALL|
        |COMMON-LISP|::|LOAD-TIME-VALUE| |CL-PPCRE|::|CREATE-SCANNER|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |CL-PPCRE|::|ENV|)
       "Make sure that constant forms are compiled into scanners at compile time."
       1)
    |CL-PPCRE|::|REGEX-REPLACE-ALL|
    #.(|SYSTEM|::|GET-SETF-SYMBOL| '|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1068 1075 (DEFINE-COMPILER-MACRO REGEX-REPLACE-ALL (&WHOLE FORM &ENVIRONMENT ...) ...)-35-3|
   #13Y(00 00 00 00 00 00 00 00 20 01 C5 19 01)
   (|CL-PPCRE|::|REGEX-REPLACE-ALL|) |COMMON-LISP|::|NIL|)
#Y(#:|1077 1100 (DEFMACRO REGEX-APROPOS-AUX (# &BODY BODY) ...)-36|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|REGEX-APROPOS-AUX| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REGEX-APROPOS-AUX|
       #177Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 64 2D 04 01 1D 80 8A 9F 5C
             78 AC DD DE 63 2D 04 01 1D 80 82 AC 94 00 9E 5C 78 9F 5C 5C 78 A0
             5C 5C 5C 78 A5 5C 79 E6 72 AA E7 AD B3 7B 02 7B 01 E8 72 AA E9 72
             AA EA 72 AA EB 72 AA EC B0 ED B5 EE EF BB F0 F1 BB 7B 02 7B 02 7B
             03 7B 04 7B 02 B0 F2 BA 03 19 5D 7A 7B 02 7B 02 F4 B0 B2 03 1B 5D
             7A F6 F7 B2 03 1E 7A B4 7B 01 65 1F B5 65 20 BF 7B 02 7B 03 65 21
             65 22 BA 03 23 5D 7A 04 12 5D 7A 7B 05 7B 02 7B 03 61 03 16 03 F8
             61 03 19 0B AE 2F 02 19 03 DF E0 B1 E1 B0 E2 6F 09 E4 B3 E5 33 07
             1F)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR| 3.
        4. |EXT|::|SOURCE-PROGRAM-ERROR| :|FORM| :|DETAIL|
        "~S: ~S does not match lambda list element ~:S" |SYSTEM|::|TEXT|
        |CL-PPCRE|::|REGEX-APROPOS-AUX|
        #1=(|CL-PPCRE|::|REGEX| |CL-PPCRE|::|PACKAGES|
            |CL-PPCRE|::|CASE-INSENSITIVE| |COMMON-LISP|::|&OPTIONAL|
            |CL-PPCRE|::|RETURN-FORM|)
        "REGEX" |COMMON-LISP|::|LET| "SCANNER" "%PACKAGES" "NEXT" "MOREP"
        |COMMON-LISP|::|LET*| |CL-PPCRE|::|CREATE-SCANNER|
        :|CASE-INSENSITIVE-MODE| |COMMON-LISP|::|AND| |COMMON-LISP|::|NOT|
        |COMMON-LISP|::|FUNCTIONP| |COMMON-LISP|::|OR|
        ((|COMMON-LISP|::|LIST-ALL-PACKAGES|))
        |COMMON-LISP|::|WITH-PACKAGE-ITERATOR|
        (:|EXTERNAL| :|INTERNAL| :|INHERITED|) |COMMON-LISP|::|LOOP|
        |COMMON-LISP|::|MULTIPLE-VALUE-BIND| (|COMMON-LISP|::|SYMBOL|)
        |COMMON-LISP|::|UNLESS| |COMMON-LISP|::|RETURN| |COMMON-LISP|::|WHEN|
        |CL-PPCRE|::|SCAN|
        ((|COMMON-LISP|::|SYMBOL-NAME| |COMMON-LISP|::|SYMBOL|)))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Auxiliary macro used by REGEX-APROPOS and REGEX-APROPOS-LIST. Loops\n
through PACKAGES and executes BODY with SYMBOL bound to each symbol\n
which matches REGEX. Optionally evaluates and returns RETURN-FORM at\n
the end. If CASE-INSENSITIVE is true and REGEX isn't already a\n
scanner, a case-insensitive scanner is used."
       1)
    (#1# |COMMON-LISP|::|&BODY| |CL-PPCRE|::|BODY|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1102 1143 (DEFUN REGEX-APROPOS-LIST (REGEX &OPTIONAL PACKAGES ...) ...)-37|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|REGEX-APROPOS-LIST| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REGEX-APROPOS-LIST|
       #74Y(00 00 00 00 01 00 01 00 A6 21 01 00 00 00 3D 02 3B 01 02 7E 01 63
            B0 DB 93 04 04 B2 32 2F 59 14 6E 03 02 92 04 02 31 E0 14 AC DD 70
            04 1B 10 AC 84 05 16 02 1B 09 B0 AD 72 A6 8A 05 72 16 02 AC 36 00
            42 02 92 01 6F A2 19 0A)
       (:|CASE-INSENSITIVE| :|CASE-INSENSITIVE-MODE|
        |CL-PPCRE|::|CREATE-SCANNER| (:|EXTERNAL| :|INTERNAL| :|INHERITED|)
        |SYSTEM|::|PACKAGE-ITERATOR-FUNCTION| |CL-PPCRE|::|SCAN|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |COMMON-LISP|::|&OPTIONAL| |CL-PPCRE|::|PACKAGES|
        |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|CASE-INSENSITIVE| |COMMON-LISP|::|T|))
       "Similar to the standard function APROPOS-LIST but returns a list of\n
all symbols which match the regular expression REGEX. If\n
CASE-INSENSITIVE is true and REGEX isn't already a scanner, a\n
case-insensitive scanner is used."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1145 1186 (DEFUN PRINT-SYMBOL-INFO (SYMBOL) ...)-38|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|PRINT-SYMBOL-INFO| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|PRINT-SYMBOL-INFO|
       #64Y(02 00 01 00 01 00 00 00 26 02 00 2B 01 7F 02 00 00 4B 00 20 AE 6D
            01 01 B1 6D 02 01 57 03 B0 36 00 16 06 1B 18 58 67 00 00 01 76 00
            AD 36 01 18 02 01 19 02 DE 6B 05 68 06 00 33 02 15 4D 19 03)
       (#(|COMMON-LISP|::|NIL|)
        #Y(|CL-PPCRE|::|PRINT-SYMBOL-INFO-1|
           #16Y(00 00 00 00 00 00 00 00 26 01 DA 2C 01 01 19 01)
           (|COMMON-LISP|::|NIL|
            #Y(|CL-PPCRE|::|PRINT-SYMBOL-INFO-1-1|
               #13Y(00 00 00 00 01 00 00 00 26 02 4E 00 00)
               (|COMMON-LISP|::|NIL|)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
               (|COMMON-LISP|::|CONDITION|) |COMMON-LISP|::|NIL| 1))
           (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|) ()
           |COMMON-LISP|::|NIL| 1)
        #Y(|CL-PPCRE|::|PRINT-SYMBOL-INFO-2|
           #284Y(00 00 00 00 00 00 00 00 26 01 63 69 00 01 8C 59 10 69 00 01 38
                 01 8D 5F 80 4A C7 14 84 00 1B 80 9E C6 1B 77 CB 1B 80 71 E8 1B
                 80 D4 38 02 72 8F 69 00 01 71 57 69 00 01 71 55 7B 01 E9 AF 38
                 02 31 95 93 01 16 EA AF 38 02 31 95 AE 2F 0B 10 0C 94 03 83 04
                 B2 31 8D 11 AE 2F 0D 16 02 AC 81 90 00 1B 80 9C 69 00 01 8D 58
                 80 54 07 00 01 5E 14 AC 72 1B AD 2F 03 42 02 38 02 72 8F AD AF
                 A1 5C 78 7B 03 DE AE 31 94 93 04 06 DF AE 38 02 31 95 94 00 83
                 01 15 1D FF 8C CC 14 AE 38 02 31 95 E2 AE 31 94 94 00 83 01 15
                 1D 0B E3 AE 31 94 94 00 83 01 AE 31 90 16 01 AC 81 90 00 84 04
                 16 04 69 00 01 63 38 01 72 3A 93 00 1D 38 02 72 8F E4 AD 38 02
                 31 95 AC 2F 0B 10 0C B0 B0 31 8D 11 AC 2F 0D AC 81 90 00 84 01
                 16 01 69 00 01 8E A8 FF 38 69 00 01 38 01 8C 66 FF 33 69 00 01
                 8D 57 03 EB 84 00 AC 63 1B 0F 87 01 00 EC 6B 13 69 00 01 AF 33
                 03 15 83 01 AD 8D 9F 6D 00 19 04)
           (|COMMON-LISP|::|NIL| "[special operator]" "[macro]"
            |COMMON-LISP|::|FUNCTION-LAMBDA-EXPRESSION| #\[ "compiled "
            "function" "closure" #\] #\Space "[class] "
            |SYSTEM|::|STREAM-START-S-EXPRESSION|
            |COMMON-LISP|::|*PRINT-RIGHT-MARGIN*|
            |SYSTEM|::|STREAM-END-S-EXPRESSION| "[keyword]" "[constant]"
            " value: " "[variable]"
            #Y(|CL-PPCRE|::|PRINT-SYMBOL-INFO-2-1|
               #37Y(00 00 00 00 03 00 00 00 21 19 B0 31 98 B0 2F 00 10 01 B2 B4
                    31 8D 11 B0 2F 02 DD B1 31 94 AE B1 31 90 9E 19 05)
               (|SYSTEM|::|STREAM-START-S-EXPRESSION|
                |COMMON-LISP|::|*PRINT-RIGHT-MARGIN*|
                |SYSTEM|::|STREAM-END-S-EXPRESSION| #\Space)
               (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
            |COMMON-LISP|::|*STANDARD-OUTPUT*|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|) ()
           |COMMON-LISP|::|NIL| 1)
        (#(|COMMON-LISP|::|CONDITION| 27.) 1. . 1.)
        #Y(|CL-PPCRE|::|PRINT-SYMBOL-INFO-3|
           #35Y(00 00 00 00 02 00 00 00 21 18 AF 31 98 AF 2F 00 10 01 B1 B3 31
                8D 11 AF 2F 02 DD B0 38 02 31 95 9E 19 04)
           (|SYSTEM|::|STREAM-START-S-EXPRESSION|
            |COMMON-LISP|::|*PRINT-RIGHT-MARGIN*|
            |SYSTEM|::|STREAM-END-S-EXPRESSION|
            " [an error occured while trying to print more info]")
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
        |COMMON-LISP|::|*STANDARD-OUTPUT*|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|SYMBOL|)
       "Auxiliary function used by REGEX-APROPOS. Tries to print some\n
meaningful information about a symbol."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1188 1196 (DEFUN REGEX-APROPOS (REGEX &OPTIONAL PACKAGES ...) ...)-39|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|REGEX-APROPOS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|REGEX-APROPOS|
       #75Y(00 00 00 00 01 00 01 00 A6 21 01 00 00 00 3D 02 3B 01 02 7E 01 AF
            DB 93 03 04 B1 32 2F 59 14 6E 03 02 92 03 02 31 E0 14 AC DD 70 04
            1B 10 AC 2F 06 16 02 1B 09 B0 AD 72 A6 8A 05 72 16 02 AC 36 00 42
            02 92 01 6F 16 05 3E 19 04)
       (:|CASE-INSENSITIVE| :|CASE-INSENSITIVE-MODE|
        |CL-PPCRE|::|CREATE-SCANNER| (:|EXTERNAL| :|INTERNAL| :|INHERITED|)
        |SYSTEM|::|PACKAGE-ITERATOR-FUNCTION| |CL-PPCRE|::|SCAN|
        |CL-PPCRE|::|PRINT-SYMBOL-INFO|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |COMMON-LISP|::|&OPTIONAL| |CL-PPCRE|::|PACKAGES|
        |COMMON-LISP|::|&KEY|
        (|CL-PPCRE|::|CASE-INSENSITIVE| |COMMON-LISP|::|T|))
       "Similar to the standard function APROPOS but returns a list of all\n
symbols which match the regular expression REGEX. If CASE-INSENSITIVE\n
is true and REGEX isn't already a scanner, a case-insensitive scanner\n
is used."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1198 1203 (LET* (# #) (DEFUN QUOTE-META-CHARS # ...))-40|
   #36Y(00 00 00 00 00 00 00 00 20 01 00 2B 01 00 10 00 DB 2F 02 0B 03 00 DD 2F
        04 DD B0 6D 05 01 32 9C C8 11 19 02)
   (|CL-PPCRE|::|*USE-BMH-MATCHERS*| "[^a-zA-Z_0-9]"
    |CL-PPCRE|::|CREATE-SCANNER| |CL-PPCRE|::|QUOTE-META-CHARS|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|QUOTE-META-CHARS|
       #40Y(00 00 00 00 01 00 00 00 A6 1C 02 00 01 00 3B 02 02 C8 FA 3B 01 04
            AF 81 62 01 69 00 01 B0 DE DB B2 DC B3 2D 07 05 19 04)
       (|COMMON-LISP|::|NIL| :|START| :|END| 0. "\\\\\\&"
        |CL-PPCRE|::|REGEX-REPLACE-ALL|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY| (|CL-PPCRE|::|START| 0.)
        (|CL-PPCRE|::|END| (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|)))
       "Quote, i.e. prefix with #\\\\, all non-word characters in STRING." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1205 1224 (LET* (# # # ...) (DEFUN QUOTE-SECTIONS # ...))-41|
   #46Y(00 00 00 00 00 00 00 00 20 01 00 2B 02 00 10 00 00 10 01 DC 2F 03 0B 06
        00 DE 2F 03 0B 06 01 DF 2F 06 DF B3 6D 07 01 32 9C CA 12 02 19 02)
   (|CL-PPCRE|::|*USE-BMH-MATCHERS*| |CL-PPCRE|::|*ALLOW-QUOTING*| "\\\\Q"
    |CL-PPCRE|::|CREATE-SCANNER| "\\\\Q((?:[^\\\\]|\\\\(?!Q))*?)(?:\\\\E|$)"
    |CL-PPCRE|::|QUOTE-SECTIONS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|QUOTE-SECTIONS|
       #34Y(00 00 00 00 01 00 00 00 26 02 63 9F F8 1B 09 69 00 02 AD DC 2D 03
            03 F8 69 00 01 AD 8A 01 70 15 19 02)
       (|COMMON-LISP|::|NIL| |CL-PPCRE|::|SCAN|
        #Y(|CL-PPCRE|::|QUOTE-SECTIONS-QUOTE-SUBSTRING|
           #26Y(00 00 00 00 07 00 00 00 26 00 B3 DA B0 C6 5F 14 DC B1 C6 5F 14
                2D 05 03 19 08)
           (:|START| 0. :|END| |CL-PPCRE|::|QUOTE-META-CHARS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|CL-PPCRE|::|TARGET-STRING| |CL-PPCRE|::|START| |CL-PPCRE|::|END|
            |CL-PPCRE|::|MATCH-START| |CL-PPCRE|::|MATCH-END|
            |CL-PPCRE|::|REG-STARTS| |CL-PPCRE|::|REG-ENDS|)
           |COMMON-LISP|::|NIL| 1)
        |CL-PPCRE|::|REGEX-REPLACE-ALL|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING|)
       "Replace sections inside of STRING which are enclosed by \\Q and\n
\\E with the quoted equivalent of these sections (see\n
QUOTE-META-CHARS). Repeat this as long as there are such\n
sections. These sections may nest."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1226 1249 (LET* (# # # ...) (DEFUN CLEAN-COMMENTS # ...))-42|
   #42Y(00 00 00 00 00 00 00 00 20 01 00 2B 02 00 10 00 DB 2F 02 0B 03 00 DD 2F
        02 0B 03 01 DE 2F 05 DE B0 6D 06 01 32 9C C9 11 19 02)
   (|CL-PPCRE|::|*USE-BMH-MATCHERS*| "(?s)\\(\\?#.*?\\)"
    |CL-PPCRE|::|CREATE-SCANNER| "(?m:#.*?$)|(?s:\\(\\?#.*?\\))"
    |CL-PPCRE|::|CLEAN-COMMENTS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|CLEAN-COMMENTS|
       #36Y(00 00 00 00 01 00 01 00 26 08 3D 01 2A 14 6D 01 01 92 02 0B 07 00
            01 14 B0 AE 2D 03 02 19 04 07 00 02 1B 73)
       (|COMMON-LISP|::|NIL|
        #Y(|CL-PPCRE|::|CLEAN-COMMENTS-REMOVE-TOKENS|
           #44Y(00 00 00 00 07 00 00 00 26 00 63 B0 B2 73 01 38 38 05 BA 80 06
                03 BA B8 80 1D 00 1B 07 DD AD DE 2D 03 05 F8 DB AD 8A 02 74 15
                19 08)
           (|COMMON-LISP|::|NIL| "\\\\[QE]" |CL-PPCRE|::|SCAN| "\\\\([QE])"
            "\\1" |CL-PPCRE|::|REGEX-REPLACE-ALL|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|CL-PPCRE|::|TARGET-STRING| |CL-PPCRE|::|START| |CL-PPCRE|::|END|
            |CL-PPCRE|::|MATCH-START| |CL-PPCRE|::|MATCH-END|
            |CL-PPCRE|::|REG-STARTS| |CL-PPCRE|::|REG-ENDS|)
           |COMMON-LISP|::|NIL| 1)
        |CL-PPCRE|::|REGEX-REPLACE-ALL|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&OPTIONAL|
        |CL-PPCRE|::|EXTENDED-MODE|)
       "Clean (?#...) comments within STRING for quoting, i.e. convert\n
\\Q to Q and \\E to E. If EXTENDED-MODE is true, also clean\n
end-of-line comments, i.e. those starting with #\\# and ending with\n
#\\Newline."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1251 1254 (DEFUN PARSE-TREE-SYNONYM (SYMBOL) ...)-43|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|PARSE-TREE-SYNONYM| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|PARSE-TREE-SYNONYM|
       #18Y(00 00 00 00 01 00 00 00 26 02 AD DA 38 01 32 9E 19 02)
       (|CL-PPCRE|::|PARSE-TREE-SYNONYM|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP|::|SYMBOL|)
       "Returns the parse tree the SYMBOL symbol is a synonym for. Returns\n
NIL is SYMBOL wasn't yet defined to be a synonym."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1256 1258 (DEFUN (SETF PARSE-TREE-SYNONYM) (NEW-PARSE-TREE SYMBOL) ...)-44|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C8 19 01)
   (#.(|SYSTEM|::|GET-SETF-SYMBOL| '|CL-PPCRE|::|PARSE-TREE-SYNONYM|)
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(#1=(|COMMON-LISP|::|SETF| |CL-PPCRE|::|PARSE-TREE-SYNONYM|)
       #17Y(00 00 00 00 02 00 00 00 26 03 AD DA B0 32 A2 19 03)
       (|CL-PPCRE|::|PARSE-TREE-SYNONYM|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|NEW-PARSE-TREE| |COMMON-LISP|::|SYMBOL|)
       "Defines SYMBOL to be a synonm for the parse tree NEW-PARSE-TREE." 1)
    #1#)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|1260 1264 (DEFMACRO DEFINE-PARSE-TREE-SYNONYM (NAME PARSE-TREE) ...)-45|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|DEFINE-PARSE-TREE-SYNONYM| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|DEFINE-PARSE-TREE-SYNONYM|
       #51Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 63 2D 04 01 1D 1B 9F 5C 78
            A0 5C 5C 78 DD DE DF E0 E1 B2 7B 02 7B 02 E1 B1 7B 02 7B 03 61 03
            19 05 AE 2F 02 19 03)
       (3. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR|
        |COMMON-LISP|::|EVAL-WHEN|
        (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|) |COMMON-LISP|::|SETF|
        |CL-PPCRE|::|PARSE-TREE-SYNONYM| |COMMON-LISP|::|QUOTE|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Defines the symbol NAME to be a synonym for the parse tree\n
PARSE-TREE. Both arguments are quoted."
       1)
    (|CL-PPCRE|::|NAME| |CL-PPCRE|::|PARSE-TREE|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
