(|SYSTEM|::|VERSION| '(20080430.))
#0Y_ #0Y |CHARSET|::|UTF-8|
#Y(#:|1 34 (IN-PACKAGE #:CL-PPCRE)-1|
   #17Y(00 00 00 00 00 00 00 00 20 01 DA 31 F6 0F 01 19 01)
   ("CL-PPCRE" |COMMON-LISP|::|*PACKAGE*|)
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|36 42 (DEFMACRO CASE-INSENSITIVE-MODE-P (FLAGS) ...)-2|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|CASE-INSENSITIVE-MODE-P| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|CASE-INSENSITIVE-MODE-P|
       #33Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 63 2D 04 01 1D 09 9F 5C 78
            DD AD 61 02 19 04 AE 2F 02 19 03)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR|
        |COMMON-LISP|::|FIRST|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Accessor macro to extract the first flag out of a three-element flag list."
       1)
    (|CL-PPCRE|::|FLAGS|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|44 46 (DEFMACRO MULTI-LINE-MODE-P (FLAGS) ...)-3|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|MULTI-LINE-MODE-P| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|MULTI-LINE-MODE-P|
       #33Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 63 2D 04 01 1D 09 9F 5C 78
            DD AD 61 02 19 04 AE 2F 02 19 03)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR|
        |COMMON-LISP|::|SECOND|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Accessor macro to extract the second flag out of a three-element flag list."
       1)
    (|CL-PPCRE|::|FLAGS|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|48 50 (DEFMACRO SINGLE-LINE-MODE-P (FLAGS) ...)-4|
   #23Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC DD 72 4C 32 9C C5 19 01)
   (|CL-PPCRE|::|SINGLE-LINE-MODE-P| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|SINGLE-LINE-MODE-P|
       #33Y(00 00 00 00 02 00 00 00 26 03 AE DA DA 63 2D 04 01 1D 09 9F 5C 78
            DD AD 61 02 19 04 AE 2F 02 19 03)
       (2. |SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|MACRO-CALL-ERROR|
        |COMMON-LISP|::|THIRD|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
       "Accessor macro to extract the third flag out of a three-element flag list."
       1)
    (|CL-PPCRE|::|FLAGS|))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|52 71 (DEFUN SET-FLAG (TOKEN) ...)-5|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|SET-FLAG| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|SET-FLAG|
       #68Y(00 00 00 00 01 00 00 00 26 02 9E 26 00 2A 6B 01 02 1B 03 6B 01 00
            14 31 B6 19 02 6B 01 9D 1B 09 6B 01 9D 1B 0C 6B 01 9D 5C 79 02 1B
            06 6B 01 9D 5C 79 00 14 31 B6 19 03 DC DD 63 DE DF E0 B3 7B 01 33
            06 1E)
       (#S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|NOT-SINGLE-LINE-MODE-P| . 32.) (:|SINGLE-LINE-MODE-P| . 24.)
           (:|NOT-MULTI-LINE-MODE-P| . 19.) (:|MULTI-LINE-MODE-P| . 14.)
           (:|CASE-SENSITIVE-P| . 6.) (:|CASE-INSENSITIVE-P| . 1.))
        |CL-PPCRE|::|FLAGS| |CL-PPCRE|::|PPCRE-SYNTAX-ERROR| :|POS|
        :|FORMAT-CONTROL| "Unknown flag token ~A" :|FORMAT-ARGUMENTS|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|TOKEN|)
       "Reads a flag token and sets or unsets the corresponding entry in\n
the special FLAGS list."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|73 92 (DEFUN ADD-RANGE-TO-HASH (HASH FROM TO) ...)-6|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|ADD-RANGE-TO-HASH| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|ADD-RANGE-TO-HASH|
       #107Y(00 00 00 00 03 00 00 00 26 04 AE 71 28 AE 71 28 AD AD 90 01 32 09
             0E 05 5B 1C 11 AD 1B 80 41 DA DB 63 DC DD DE B6 B6 7B 02 33 06 1E
             AD 63 1B 1A AD 80 29 00 14 71 2B AC B5 64 31 6F 16 01 AC 71 2C AC
             B5 64 31 6F 16 01 85 01 AD AF 91 01 32 60 16 02 1B 14 AC 71 29 AC
             B4 64 31 6F 16 01 85 00 AC AE 91 01 32 6E 16 01 A2 19 06)
       (|CL-PPCRE|::|PPCRE-SYNTAX-ERROR| :|POS| :|FORMAT-CONTROL|
        "Invalid range from ~A to ~A in char-class" :|FORMAT-ARGUMENTS|
        |CL-PPCRE|::|FLAGS|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|HASH| |CL-PPCRE|::|FROM| |CL-PPCRE|::|TO|)
       "Adds all characters from character FROM to character TO (inclusive)\n
to the char class hash HASH. Does the right thing with respect to\n
case-(in)sensitivity as specified by the special variable FLAGS."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|94 136 (DEFUN CONVERT-CHAR-CLASS-TO-HASH (LIST) ...)-7|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|CONVERT-CHAR-CLASS-TO-HASH| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|CONVERT-CHAR-CLASS-TO-HASH|
       #148Y(00 00 00 00 01 00 00 00 26 02 38 06 6B 00 DB 72 B5 38 01 72 CF 6B
             00 DB 72 B5 38 01 72 C9 DC 71 6D AE 63 AD 8C 9F 80 69 87 01 00 14
             8E 2E 1E AC 8E 18 1F 9D 20 80 4D 94 00 25 0F 80 47 AE 9E 5C 78 9F
             5C 5C 5B 14 2D 03 03 83 01 1B 56 AE AD 9F 1B 73 9D 26 04 26 AE 0E
             05 1B 12 AE 0E 05 1B 16 AE 0E 08 1B 08 AE 0E 08 1B 0C AE 0E 09 14
             30 06 FA 1B 56 AE 0E 09 14 30 07 FA 1B 4D E4 E5 63 E6 E7 D3 1B 06
             E4 E5 63 E6 EA D3 14 B2 7B 01 33 06 1E 9F 19 05)
       (|CL-PPCRE|::|*REGEX-CHAR-CODE-LIMIT*| #10r1/4 1.0f0
        |CL-PPCRE|::|ADD-RANGE-TO-HASH|
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|NON-WORD-CHAR-CLASS| . 30.) (:|WORD-CHAR-CLASS| . 21.)
           (:|NON-WHITESPACE-CHAR-CLASS| . 16.)
           (:|WHITESPACE-CHAR-CLASS| . 11.) (:|NON-DIGIT-CLASS| . 6.)
           (:|DIGIT-CLASS| . 1.))
        |CL-PPCRE|::|+DIGIT-HASH+| |CL-PPCRE|::|MERGE-HASH|
        |CL-PPCRE|::|MERGE-INVERTED-HASH| |CL-PPCRE|::|+WHITESPACE-CHAR-HASH+|
        |CL-PPCRE|::|+WORD-CHAR-HASH+| |CL-PPCRE|::|PPCRE-SYNTAX-ERROR| :|POS|
        :|FORMAT-CONTROL| "Unknown symbol ~A in character class"
        :|FORMAT-ARGUMENTS| :|RANGE| "Unknown item ~A in char-class list")
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|LIST|)
       "Combines all items in LIST into one char class hash and returns it.\n
Items can be single characters, character ranges like (:RANGE #\\A\n
#\\E), or special character classes like :DIGIT-CLASS. Does the right\n
thing with respect to case-(in)sensitivity as specified by the\n
special variable FLAGS."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|138 205 (DEFUN MAYBE-SPLIT-REPETITION (REGEX GREEDYP MINIMUM ...) ...)-8|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|MAYBE-SPLIT-REPETITION| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|MAYBE-SPLIT-REPETITION|
       #129Y(00 00 00 00 07 00 00 00 26 00 93 04 0D 14 8E AC 80 5A DC B2 B2 90
             02 2F 80 57 B1 8F AD 14 DD DE B5 6F 05 E0 B6 E1 B7 E2 B9 E3 B9 E4
             BA E5 BB 2D 0F 01 14 93 05 06 14 B3 90 01 2F 38 DD DE B6 E0 B7 E1
             E6 E2 93 0D 05 14 BB 33 01 38 14 E3 BA E4 BB E5 BC 6E 0F 01 B3 8E
             AC 1D DC B4 90 01 2F 1A E7 E8 A0 14 AF 7B 02 2D 03 01 19 0A DA 2F
             01 19 08 A4 19 08 15 19 08 15 19 09 E7 E8 B7 2F 05 1B 62)
       (|CL-PPCRE|::|VOID| |CLOS|::|MAKE-INSTANCE| 1. |CL-PPCRE|::|REPETITION|
        :|REGEX| |CL-PPCRE|::|COPY-REGEX| :|GREEDYP| :|MINIMUM| :|MAXIMUM|
        :|MIN-LEN| :|LEN| :|CONTAINS-REGISTER-P| 0. |CL-PPCRE|::|SEQ|
        :|ELEMENTS|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|REGEX| |CL-PPCRE|::|GREEDYP| |CL-PPCRE|::|MINIMUM|
        |CL-PPCRE|::|MAXIMUM| |CL-PPCRE|::|MIN-LEN| |COMMON-LISP|::|LENGTH|
        |CL-PPCRE|::|REG-SEEN|)
       "Splits a REPETITION object into a constant and a varying part if\n
applicable, i.e. something like\n
  a{3,} -> a{3}a*\n
The arguments to this function correspond to the REPETITION slots of\n
the same name."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|207 266 (DEFUN MAYBE-ACCUMULATE (STR) ...)-9|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|MAYBE-ACCUMULATE| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|MAYBE-ACCUMULATE|
       #177Y(00 00 00 00 01 00 00 00 26 02 0E 00 1D 80 9F 6B 01 AC DC 8E 3C 12
             93 00 80 56 AC E7 8F 3C 80 83 00 0F 00 16 01 1B 80 86 6B 01 6F 03
             AF 2F 03 23 6F 6B 01 6B 01 6F 04 B0 6F 04 73 02 37 AC AE 30 05 16
             02 6B 01 E0 72 52 6B 01 6F 04 38 06 7E 02 31 1E 6B 01 E0 72 52 6B
             01 6F 04 B0 6F 04 73 01 38 B0 6F 06 AE AD AF 63 38 02 32 68 16 03
             1B 2B E0 E2 E3 E4 B2 6F 03 2D 05 0B 0F 01 14 E0 B0 6F 04 64 38 06
             B8 2F 06 FB D1 FD 7E 02 71 1D 32 53 6B 01 AF 6F 04 AC AE 30 05 16
             02 64 AF 30 07 16 01 1B 0B AC DB E8 70 0F EA 2D 03 11 16 01 00 19
             02)
       (|CL-PPCRE|::|ACCUMULATE-START-P| |CL-PPCRE|::|STARTS-WITH|
        #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|STR|)
        |CL-PPCRE|::|CASE-INSENSITIVE-P| |CL-PPCRE|::|LEN|
        #.(|SYSTEM|::|GET-SETF-SYMBOL| '|CL-PPCRE|::|LEN|) |CL-PPCRE|::|STR|
        #.(|SYSTEM|::|GET-SETF-SYMBOL| '|CL-PPCRE|::|SKIP|) :|STR| ""
        :|CASE-INSENSITIVE-P| |CLOS|::|MAKE-INSTANCE|
        |COMMON-LISP|::|CHARACTER|
        #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|EVERYTHING|)
        (|CL-PPCRE|::|STR| |COMMON-LISP|::|NULL| |CL-PPCRE|::|EVERYTHING|)
        |SYSTEM|::|TYPECASE-ERROR-STRING|
        (|COMMON-LISP|::|OR| |CL-PPCRE|::|STR| |COMMON-LISP|::|NULL|
         |CL-PPCRE|::|EVERYTHING|)
        |SYSTEM|::|ETYPECASE-FAILED|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|STR|)
       "Accumulate STR into the special variable STARTS-WITH if\n
ACCUMULATE-START-P (also special) is true and STARTS-WITH is either\n
NIL or a STR object of the same case mode. Always returns NIL."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|268 777 (DEFUN CONVERT-AUX (PARSE-TREE) ...)-10|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|CONVERT-AUX| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|CONVERT-AUX|
       #1275Y(00 00 00 00 01 00 00 00 26 02 9E 21 0F AD 8E 2E 84 1F AD 8E 19 84
              1A 9E 26 4B 84 BD 9E 5B 26 00 84 03 95 01 1B 09 AC 94 01 6C 5F 31
              B6 83 00 9D 20 03 92 00 71 16 01 DB C7 1B 80 58 9E 5C 5C 1C 61 9E
              5C 78 29 01 03 42 95 04 1B 0A AC 94 01 6C FF B8 31 B6 83 00 9D 20
              03 92 00 70 16 01 DB DC A3 5C 1B 82 45 6B 04 31 AB 10 04 A1 5C 5C
              1C 58 A1 5C 78 28 FF 94 1B 82 35 00 0F 05 95 01 1B 0A AC 94 01 6C
              FF 84 31 B6 83 00 9D 20 03 92 00 70 16 01 E0 CC 14 A0 5C 1B 84 2F
              E2 E3 63 E4 E5 D1 1B 84 48 AC 8E AC 73 AC 32 B2 1B 80 50 E2 E3 63
              E4 E9 D1 1B 82 55 AC 6F 11 32 62 26 12 27 E2 E3 63 E4 ED D1 1B 82
              44 EE EF AF F0 B0 2F 11 5B 1B 80 4D EE EF AF F0 B0 2F 11 78 F1 B2
              2F 11 5C 78 2D 07 03 19 05 E2 E3 63 E4 F2 D1 1B 82 1D 00 0F 05 9E
              5C 78 AC 8E 1A FF AA AC 28 FF 0D 14 A0 5C 5C 78 6C FF 05 AD 8E 1A
              0B AD E7 8E 3C 06 AD E8 8F 3C FF 99 AC EA 8E 3C FF 9C EE EF AF F0
              A1 14 2D 05 03 19 05 00 0F 05 6B 04 31 AB 10 04 F3 F4 A3 5C 78 6C
              FE D4 F5 94 08 03 1C 5A 14 2D 05 03 1B 81 6B E2 E3 63 E4 65 1E E6
              A9 1B 83 9F 00 0F 05 6B 04 31 AB 10 04 A1 5C 78 6C FE AD AC 6F 1D
              93 00 60 65 1F F4 AF F5 94 0A 03 20 5A 14 65 21 B2 2D 07 03 16 02
              1B 81 35 AF 2F 27 0F 26 0E 23 1C 80 5B AF AE B6 B6 B2 B1 6B 23 2D
              07 28 16 04 1B 80 ED 03 2B 1B 80 70 9D 1B 80 95 6B 05 9F 5C 78 A0
              5C 5C 78 93 00 08 65 22 AE AE 90 02 2F 03 00 0F 05 00 10 23 A4 5C
              5C 5C 78 6C FE 4C AC 6F 24 94 09 03 25 5A 14 AE 6F 1D 93 09 0C 0E
              26 1C 08 B4 8F AC 04 93 07 FF A0 0E 23 1D FF A5 93 01 FF A1 93 00
              FF 9D AC 8E AC FF 98 93 07 07 B4 B4 90 01 2F FF 8E 00 10 23 02 10
              29 B5 6F 2A AC 64 BD 8E AC FF 8E BD 32 B2 14 93 11 03 14 32 B2 14
              B9 B8 6B 23 6E 07 28 DB DC AE BA 7B 02 6E 03 03 BD 8E AD FF 73 AC
              64 65 2B 65 22 BB 63 64 2D 07 28 16 03 12 02 16 04 1B 80 46 A6 5C
              1B 34 6B 04 71 AB 6B 2C 94 03 03 2D 5A 1D 05 A0 5C 78 32 61 14 9F
              10 04 02 0F 23 93 03 03 02 0F 2E 6B 2C 32 B1 0F 2C AF 0E 2F 5D 0F
              2F 65 30 F4 94 09 24 2D 49 A6 5C 78 6C FD 93 65 31 B4 65 32 B5 2D
              07 03 11 19 05 00 0F 05 65 33 65 34 A0 5C 78 65 21 A2 5C 5C 78 2D
              05 03 19 02 00 0F 05 6B 04 31 AB 10 04 65 35 F4 A3 5C 78 28 FD 60
              14 2D 03 03 11 19 02 9F 5C 5B 0B 00 00 1D 3A 1B 0E 00 2B 01 9F 5C
              78 8E 19 6D 0B 00 00 1D 2A 6B 2F 01 03 03 2B F9 1B 18 87 03 02 14
              68 05 00 38 04 8D 35 08 6B 2C AE 73 01 38 84 00 83 03 85 01 AF 8D
              9F 64 AC 31 B1 16 04 14 9D 5B 1C 03 A0 5C 5B 14 AC 8F 1F 04 AC 8E
              AD 2C E2 E3 63 E4 65 36 D1 14 A7 1B 81 DD E0 E1 B0 01 02 1B 0A 87
              02 01 14 A3 74 84 00 83 02 AE 8D 9F 72 AC 31 B1 16 02 F8 2D 03 03
              19 06 00 0F 05 6B 37 AD 33 01 35 0F 37 AE 6D 38 01 9F 5C 1C 4D AD
              9E 34 19 06 9E 5C 78 AC 6F 39 29 01 04 FC B7 7E 00 93 01 80 78 1B
              80 7D 7E 00 9E 59 F9 93 01 80 6C 1B 80 71 B1 71 74 AC 31 75 42 03
              01 02 93 04 11 A0 F9 14 84 00 B1 31 75 42 02 6A 04 6A 04 92 04 6F
              AC 31 B1 16 06 FC 93 01 80 41 1B 80 46 65 40 65 41 94 06 71 51 65
              42 00 1B 80 56 01 02 65 3A 95 04 94 05 03 3B 5A 14 63 65 3C AF 90
              00 2A FF 9D 65 3D AF 90 00 2A FF 9E AE 2F 3E FD 14 80 73 03 14 65
              3F 90 01 33 FF 9A 92 01 08 AF 65 22 90 01 2F FF BA 92 01 25 AF 65
              3F 91 01 2F 1E 94 04 A2 5C 78 91 01 0D 15 65 40 65 41 94 06 71 51
              65 42 02 14 6E 05 03 AC 2F 43 15 19 08 00 0F 05 65 44 65 45 B3 65
              42 0E 04 78 65 46 B3 65 47 B4 2D 09 03 19 08 99 48 95 02 33 00 18
              03 49 1B 80 AF E2 E3 63 E4 65 4A E6 A4 5B 1B 80 BC 65 40 65 41 AF
              71 51 65 42 0E 04 78 6E 05 03 AC 2F 43 15 19 02 03 49 1B 80 89 65
              4C 65 4D 00 1B 80 76 65 4C 65 4D 02 1B 80 6E 00 0F 05 65 44 65 45
              A0 26 4E 0B 0E 4F 1B 08 00 1B 05 0E 50 1B 01 00 14 65 42 63 65 46
              B3 65 51 65 52 38 02 71 C1 65 47 B5 65 53 65 52 38 02 71 C1 2D 09
              03 19 02 65 54 65 55 AF 65 56 65 52 38 02 71 C1 65 57 0E 04 5C 5B
              1D 0A B1 65 58 65 52 38 02 31 C1 59 14 65 59 B3 03 5A 5A 14 2D 07
              03 19 02 00 0F 05 65 5B 65 5C 0E 04 5C 5C 5B 14 2D 03 03 19 02 AD
              2F 48 03 49 14 2F 03 19 02 AD 8F 18 03 AD 2F 5D 14 92 00 0F E2 E3
              63 E4 65 5E D1 14 A5 14 7B 01 33 06 1E 14 71 AE 29 01 04 FB 0F)
       (#S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|FLAGS| . 1017.) (:|INVERTED-CHAR-CLASS| . 897.)
           (:|CHAR-CLASS| . 897.) (:|REGEX| . 808.) (:|BACK-REFERENCE| . 667.)
           (:|STANDALONE| . 632.) (:|FILTER| . 611.) (:|NAMED-REGISTER| . 542.)
           (:|REGISTER| . 542.) (:|NON-GREEDY-REPETITION| . 380.)
           (:|GREEDY-REPETITION| . 380.) (:|NEGATIVE-LOOKBEHIND| . 302.)
           (:|POSITIVE-LOOKBEHIND| . 302.) (:|NEGATIVE-LOOKAHEAD| . 261.)
           (:|POSITIVE-LOOKAHEAD| . 261.) (:|BRANCH| . 206.)
           (:|ALTERNATION| . 89.) (:|GROUP| . 69.) (:|SEQUENCE| . 28.))
        |CL-PPCRE|::|SEQ| :|ELEMENTS| |CLOS|::|MAKE-INSTANCE|
        |CL-PPCRE|::|FLAGS| |CL-PPCRE|::|ACCUMULATE-START-P|
        |CL-PPCRE|::|ALTERNATION| :|CHOICES| |CL-PPCRE|::|PPCRE-SYNTAX-ERROR|
        :|POS| :|FORMAT-CONTROL| "Register 0 doesn't exist: ~S"
        :|FORMAT-ARGUMENTS| #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|LOOKAHEAD|)
        #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|LOOKBEHIND|)
        "Branch test must be look-ahead, look-behind or number: ~S"
        #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|ALTERNATION|)
        |CL-PPCRE|::|CHOICES|
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (2. . 21.) (1. . 10.) (0. . 1.))
        "No choices in branch: ~S" |CL-PPCRE|::|BRANCH| :|TEST| :|THEN-REGEX|
        :|ELSE-REGEX| "Too much choices in branch: ~S" |CL-PPCRE|::|LOOKAHEAD|
        :|REGEX| :|POSITIVEP| :|POSITIVE-LOOKAHEAD| |CL-PPCRE|::|REGEX-LENGTH|
        "Variable length look-behind not implemented (yet): ~S"
        |CL-PPCRE|::|LOOKBEHIND| :|POSITIVE-LOOKBEHIND| :|LEN| 1.
        |CL-PPCRE|::|REG-SEEN| |CL-PPCRE|::|REGEX-MIN-LENGTH|
        :|GREEDY-REPETITION| |CL-PPCRE|::|STARTS-WITH|
        |CL-PPCRE|::|EVERYTHINGP| |CL-PPCRE|::|MAYBE-SPLIT-REPETITION|
        |CL-PPCRE|::|REMOVE-REGISTERS-P| |CL-PPCRE|::|REMOVE-REGISTERS| 0.
        |CL-PPCRE|::|REG-NUM| :|NAMED-REGISTER| |CL-PPCRE|::|NAMED-REG-SEEN|
        |CL-PPCRE|::|REG-NAMES| |CL-PPCRE|::|REGISTER| :|NUM| :|NAME|
        |CL-PPCRE|::|FILTER| :|FN| |CL-PPCRE|::|STANDALONE|
        "Illegal back-reference: ~S" |CL-PPCRE|::|MAX-BACK-REF|
        #Y(|CL-PPCRE|::|CONVERT-AUX-MAKE-BACK-REF|
           #29Y(00 00 00 00 01 00 00 00 26 02 DB DC 97 03 DD 0E 04 78 DF 69 00
                01 72 61 2D 07 06 19 02)
           (|COMMON-LISP|::|NIL| |CL-PPCRE|::|BACK-REFERENCE| :|NUM|
            :|CASE-INSENSITIVE-P| |CL-PPCRE|::|FLAGS| :|NAME|
            |CLOS|::|MAKE-INSTANCE|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|CL-PPCRE|::|BACKREF-NUMBER|) |COMMON-LISP|::|NIL| 1)
        |CL-PPCRE|::|PARSE-STRING| #.|COMMON-LISP|::|MOST-POSITIVE-FIXNUM|
        :|INVERTED-CHAR-CLASS|
        #Y(|CL-PPCRE|::|CONVERT-AUX-1|
           #15Y(00 00 00 00 01 00 00 00 26 02 AD C5 5A 19 02)
           (:|WORD-CHAR-CLASS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
           (|CL-PPCRE|::|ITEM|) |COMMON-LISP|::|NIL| 1)
        #Y(|CL-PPCRE|::|CONVERT-AUX-2|
           #15Y(00 00 00 00 01 00 00 00 26 02 AD C5 5A 19 02)
           (:|NON-WORD-CHAR-CLASS|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
           (|CL-PPCRE|::|ITEM|) |COMMON-LISP|::|NIL| 1)
        |CL-PPCRE|::|CONVERT-CHAR-CLASS-TO-HASH| 2. |CL-PPCRE|::|STR| :|STR|
        :|CASE-INSENSITIVE-P| |CL-PPCRE|::|MAYBE-ACCUMULATE|
        |CL-PPCRE|::|CHAR-CLASS| :|HASH| :|INVERTEDP| :|WORD-CHAR-CLASS-P|
        |CL-PPCRE|::|SET-FLAG| |CL-PPCRE|::|VOID|
        "Unknown token ~A in parse-tree"
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|NOT-SINGLE-LINE-MODE-P| . 1205.) (:|SINGLE-LINE-MODE-P| . 1205.)
           (:|NOT-MULTI-LINE-MODE-P| . 1205.) (:|MULTI-LINE-MODE-P| . 1205.)
           (:|CASE-SENSITIVE-P| . 1205.) (:|CASE-INSENSITIVE-P| . 1205.)
           (:|EVERYTHING| . 1187.) (:|MODELESS-END-ANCHOR| . 1143.)
           (:|MODELESS-START-ANCHOR| . 1143.)
           (:|MODELESS-END-ANCHOR-NO-NEWLINE| . 1143.) (:|END-ANCHOR| . 1143.)
           (:|START-ANCHOR| . 1143.) (:|NON-WHITESPACE-CHAR-CLASS| . 1089.)
           (:|WHITESPACE-CHAR-CLASS| . 1089.) (:|NON-WORD-CHAR-CLASS| . 1089.)
           (:|WORD-CHAR-CLASS| . 1089.) (:|NON-DIGIT-CLASS| . 1089.)
           (:|DIGIT-CLASS| . 1089.) (:|NON-WORD-BOUNDARY| . 1081.)
           (:|WORD-BOUNDARY| . 1073.) (:|VOID| . 1068.))
        |CL-PPCRE|::|WORD-BOUNDARY| :|NEGATEDP|
        #S(|COMMON-LISP|::|HASH-TABLE| :|TEST| |EXT|::|STABLEHASH-EQ|
           (:|NON-WHITESPACE-CHAR-CLASS| . 8.) (:|WHITESPACE-CHAR-CLASS| . 8.)
           (:|NON-WORD-CHAR-CLASS| . 5.) (:|WORD-CHAR-CLASS| . 5.)
           (:|NON-DIGIT-CLASS| . 1.) (:|DIGIT-CLASS| . 1.))
        |CL-PPCRE|::|+DIGIT-HASH+| |CL-PPCRE|::|+WHITESPACE-CHAR-HASH+|
        (:|NON-DIGIT-CLASS| :|NON-WORD-CHAR-CLASS|
         :|NON-WHITESPACE-CHAR-CLASS|)
        #.#'|COMMON-LISP|::|EQ| (:|WORD-CHAR-CLASS| :|NON-WORD-CHAR-CLASS|)
        |CL-PPCRE|::|ANCHOR| :|STARTP|
        (:|START-ANCHOR| :|MODELESS-START-ANCHOR|) :|MULTI-LINE-P|
        (:|MODELESS-START-ANCHOR| :|MODELESS-END-ANCHOR|
         :|MODELESS-END-ANCHOR-NO-NEWLINE|)
        :|NO-NEWLINE-P| :|MODELESS-END-ANCHOR-NO-NEWLINE|
        |CL-PPCRE|::|EVERYTHING| :|SINGLE-LINE-P|
        |CL-PPCRE|::|PARSE-TREE-SYNONYM| "Unknown token ~A in parse-tree")
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|PARSE-TREE|)
       "Converts the parse tree PARSE-TREE into a REGEX object and returns it.\n\n
Will also\n
  - split and optimize repetitions,\n
  - accumulate strings or EVERYTHING objects into the special variable\n
    STARTS-WITH,\n
  - keep track of all registers seen in the special variable REG-NUM,\n
  - keep track of all named registers seen in the special variable REG-NAMES\n
  - keep track of the highest backreference seen in the special\n
    variable MAX-BACK-REF,\n
  - maintain and adher to the currently applicable modifiers in the special\n
    variable FLAGS, and\n
  - maybe even wash your car..."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|779 811 (DEFUN CONVERT (PARSE-TREE) ...)-11|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|CL-PPCRE|::|CONVERT| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|CL-PPCRE|::|CONVERT|
       #99Y(00 00 00 00 01 00 00 00 26 02 01 03 61 03 10 00 C6 10 02 00 10 03
            00 10 04 02 10 05 00 10 06 C6 10 07 C2 6F 08 6B 07 6B 02 90 01 32
            29 6B 06 E8 8F 3C 0D 6B 06 E9 6B 06 E9 72 52 EA 72 3B 32 53 AC 6B
            02 6B 06 0E 04 1D 04 6B 03 32 64 14 40 04 16 01 12 07 19 02 E3 E4
            63 E5 E6 E7 6B 07 7B 01 33 06 1E)
       (|CL-PPCRE|::|FLAGS| 0. |CL-PPCRE|::|REG-NUM| |CL-PPCRE|::|REG-NAMES|
        |CL-PPCRE|::|NAMED-REG-SEEN| |CL-PPCRE|::|ACCUMULATE-START-P|
        |CL-PPCRE|::|STARTS-WITH| |CL-PPCRE|::|MAX-BACK-REF|
        |CL-PPCRE|::|CONVERT-AUX| |CL-PPCRE|::|PPCRE-SYNTAX-ERROR| :|POS|
        :|FORMAT-CONTROL|
        "Backreference to register ~A which has not been defined"
        :|FORMAT-ARGUMENTS| #.(|CLOS|::|FIND-CLASS| '|CL-PPCRE|::|STR|)
        |CL-PPCRE|::|STR| |COMMON-LISP|::|SIMPLE-STRING|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|CL-PPCRE|::|PARSE-TREE|)
       "Converts the parse tree PARSE-TREE into an equivalent REGEX object\n
and returns three values: the REGEX object, the number of registers\n
seen and an object the regex starts with which is either a STR object\n
or an EVERYTHING object (if the regex starts with something like\n
\".*\") or NIL."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
