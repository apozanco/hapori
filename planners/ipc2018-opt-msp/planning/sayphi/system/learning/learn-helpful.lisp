;; SAYPHI Planner 
;; Learning Helpful Actions through relational learning.
;; Td. 10.12.2007
;; _________________________________________________________________________________________

;; For learning the helpful actions, the given solution should be from a search trree
;; that only includes helpful actions


;; This gets the max numbers of parameters in the domain operators
(defun max-action-parameters ()
  (let ((max-param 0))
    (dolist (ioperator (dom-actions *pspace*) max-param)
      (when (> (length (action-parameters ioperator)) max-param)
	(setf max-param (length (action-parameters ioperator)))))))


(defun write-comma-list-params (n-parameter stream)
  (dotimes (i-param n-parameter)
    (format stream ",+-~a" (string (code-char (+ i-param 65))))))


(defun tilde-meta-predicate (stream meta-predicate predicate-type example-id)
  (cond ((eq predicate-type 'target-goal)
	 (format stream "~%target_goal_~(~a~)(~(~a~)" (car meta-predicate) example-id)
	 (dolist (i-arg (cdr meta-predicate))
	   (format stream ",~(~a~)" i-arg))
	 (format stream ")."))))
	 
	
(defun tilde-gaction-predicate (stream example-id plan-action &key (predicate 'candidate))
  (let ((pred-symbol nil))
    (cond ((eq predicate 'candidate)
	   (setf pred-symbol (intern (format nil "candidate_~(~a~)" (car plan-action))))
	   (format stream "~%~a(~(~a~)" pred-symbol example-id)
	   (dolist (i-arg (cdr plan-action))
	     (format stream ",~(~a~)" i-arg)))
	  ((eq predicate 'selected)
	   (format stream "~%selected(~(~a~),~(~a~)" example-id (car plan-action)))
	   )
    (format stream ").")
    ))



(defun sibling-episode (stream selected-node example-id)
  (let ((parent-node (snode-parent selected-node)))
    (format stream "% Example ~a" example-id)
    (tilde-gaction-predicate stream example-id (snode-plan-action selected-node) 
				   :predicate 'selected)
    (dolist (i-sibling (snode-children parent-node))
      (tilde-gaction-predicate stream example-id (snode-plan-action i-sibling)))
    (dolist (i-goal (pp-state (target-goals parent-node) 'list))
      (tilde-meta-predicate stream i-goal 'target-goal example-id))
    (format stream "~%~%")
    ))



(defun generate-siblings-episodes (&key (example-file (concatenate 'string *domain-dir* 
								   "siblings-episodes.kb"))
				   (solution *say-solution*)
				   (prob-tag (get-problem-filename)) 
				   (better-heuristic-p nil))
  (declare (ignore better-heuristic-p)) 
  (when (and (solution-p solution)
	     (solution-found solution))
    (let ((n-example 1) (example-id nil))
      (with-open-file (ofile example-file :direction :output :if-exists :append :if-does-not-exist :create)
	(dolist (selected-node (solution-path solution))
	  (setf example-id (intern (format nil "~a_E~d" prob-tag n-example)))
	  (sibling-episode ofile selected-node example-id)
	  (incf n-example))))))

	

;; Writing the setup files for Tilde
(defun write-tilde-setup-file ()
  (let ((setup-file (concatenate 'string *domain-dir* *this-domain* "siblings-episodes.s"))
;; 	(max-parameter (max-action-parameters))

	)
	
    (with-open-file (ostream setup-file :direction :output :if-exists :supersede :if-does-not-exist :create)
      (format ostream "%%***********************************************************")
      (format ostream "~%%%  File Automatically generated by SAYPHI program")
      (format ostream "~%%%  To learn the selection of nodes")
      (format ostream "~%%%***********************************************************")
      (format ostream "~%% Tilde Options")
      (format ostream "~%tilde_mode(classify).")
      (format ostream "~%typed_language(yes).")
      (format ostream "~%output_options([c45,c45c,c45e,lp,prolog_probab]).")
      (format ostream "~%")
      (format ostream "~%% The target concept")
      (format ostream "~%predict(selected(+Example,-Class)).")

      (format ostream "~%classes([")
      ;; Printing op names like: drive,lift,drop,load,unload
      (format ostream "~(~a~)" (action-name (car (dom-actions *pspace*))))
      (dolist (i-op (cdr (dom-actions *pspace*)))
	(format ostream ",~(~a~)" (action-name i-op)))
      (format ostream "]).")
      (format ostream "~%type(selected(example,class)).")

      (format ostream "~%")
      (format ostream "~%% The domain predicates")
      (dolist (i-op (dom-actions *pspace*))
	(format ostream "~%rmode(candidate_~(~a~)(+Example" (action-name i-op))
	(write-comma-list-params (length (action-parameters i-op)) ostream)
	(format ostream ")).")
	(format ostream "~%type(candidate_~(~a~)(example" (action-name i-op))
	(dolist (i-param (action-parameters i-op))
	  (format ostream ",~(~a~)" (cdr i-param)))
	(format ostream ")).")
	(format ostream "~%")
	)

      (maphash #'(lambda (pred args)
		   (when (pred-true-able pred)
		     (format ostream "~%rmode(target_goal_~(~a~)(+Example" pred)
		     (write-comma-list-params (length args) ostream)
		     (format ostream ")).")
		     (format ostream "~%type(target_goal_~(~a~)(example" pred)
		     (dolist (i-arg args)
		       (format ostream ",~(~a~)" (cdr i-arg)))
		     (format ostream ")).")
		     (format ostream "~%")
		     ))
	       
	       (dom-predicates *pspace*))
     
      (format ostream "~%")
      (format ostream "~%% The ACE commands")
      (format ostream "~%execute(tilde).")
      (format ostream "~%execute(quit).")
      (format ostream "~%")
      )))


(defun restart-tilde-files ()
  (let ((example-file (concatenate 'string *domain-dir* "siblings-episodes.kb"))
	(setup-file (concatenate 'string *domain-dir* "siblings-episodes.s")))
    (when (probe-file example-file) (delete-file example-file))
    (when (probe-file setup-file) (delete-file setup-file))))
	
    



(defun learn-helpful-tilde (domain-dir domain-file runset-probprefix 
			   &key (algorithm 'hc-bnb)
			   (timeout 60))
  (setf *learn-helpful-tilde* t)
  (say-domain domain-dir domain-file)
  (restart-tilde-files)
  (write-tilde-setup-file)
  (runset domain-dir domain-file 
	  :algorithm algorithm :timeout timeout 
	  :probs-prefix runset-probprefix :say-learning-p t)
  (setf *learn-helpful-tilde* nil))