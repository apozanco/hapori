# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:xenial
Stage: build

%files
    . /planner

%post
    ## Install all necessary dependencies.
    apt-get update
    apt-get -y install --no-install-recommends python cmake g++ g++-multilib make

    ## Build planner.
    cd /planner
    ./build.py release64 -j4
    cd /planner/symba
    ./build -j4

    ## Strip binaries.
    strip --strip-all /planner/builds/release64/bin/downward \
        /planner/builds/release64/bin/preprocess \
        /planner/symba/src/preprocess/preprocess \
        /planner/symba/src/search/downward-1 \
        /planner/symba/src/search/downward-2 \
        /planner/symba/src/search/downward-4

# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:xenial
Stage: run

%files from build
    /planner/driver
    /planner/fast-downward.py
    /planner/builds/release64/bin
    /planner/symba/src/plan
    /planner/symba/src/plan-ipc
    /planner/symba/src/translate
    /planner/symba/src/preprocess/preprocess
    /planner/symba/src/search/downward
    /planner/symba/src/search/downward-1
    /planner/symba/src/search/downward-2
    /planner/symba/src/search/downward-4
    /planner/symba/src/search/dispatch
    /planner/symba/src/search/unitcost
    /planner/symba.py
    /planner/plan-ipc.py
    /planner/create-image-from-graph.py
    /planner/timers.py
    /planner/dl_model/selector.py
    /planner/dl_model/__init__.py
    /planner/dl_model/models/lifted/model.h5
    /planner/dl_model/models/lifted/model.json
    /planner/src/translate/
    /planner/requirements.txt

%post
    apt-get update
    apt-get -y install --no-install-recommends python gawk
    # missing dependencies with --no-install-recommends
    apt-get -y install python-pip
    pip install -r /planner/requirements.txt
    rm -rf /var/lib/apt/lists/*

%runscript
    DOMAINFILE=$1
    PROBLEMFILE=$2
    PLANFILE=$3

    ## Call your planner.
    /planner/plan-ipc.py \
        $DOMAINFILE \
        $PROBLEMFILE \
        $PLANFILE \
        --image-from-lifted-task

## Update the following fields with meta data about your submission.
## Please use the same field names and use only one line for each value.
%labels
Name        Delfi1
Description This planner uses an offline learned algorithm selector to choose the "best" planner online based on a abstract structure graph of the PDDL description of the planning task. In particular, the learning algorithm uses such graphs of a planning task, turns them into an image and uses the planner runtime to train a neural net. The learned model thus predicts runtime of planners on a given task and chooses a planner accordingly.
Authors     Michael Katz <michael.katz1@ibm.com>, Shirin Sohrabi <ssohrab@us.ibm.com>, Horst Samulowitz <samulowitz@us.ibm.com>, and Silvan Sievers <silvan.sievers@unibas.ch>
SupportsDerivedPredicates no
SupportsQuantifiedPreconditions no
SupportsQuantifiedEffects no
